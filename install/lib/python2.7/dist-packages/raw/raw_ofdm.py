# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_raw_ofdm')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_raw_ofdm')
    _raw_ofdm = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_raw_ofdm', [dirname(__file__)])
        except ImportError:
            import _raw_ofdm
            return _raw_ofdm
        try:
            _mod = imp.load_module('_raw_ofdm', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _raw_ofdm = swig_import_helper()
    del swig_import_helper
else:
    import _raw_ofdm
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _raw_ofdm.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _raw_ofdm.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _raw_ofdm.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _raw_ofdm.high_res_timer_epoch()
class raw_ofdm_mapper_sptr(object):
    """Proxy of C++ boost::shared_ptr<(raw_ofdm_mapper)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(raw_ofdm_mapper)> self) -> raw_ofdm_mapper_sptr
        __init__(boost::shared_ptr<(raw_ofdm_mapper)> self, raw_ofdm_mapper * p) -> raw_ofdm_mapper_sptr
        """
        this = _raw_ofdm.new_raw_ofdm_mapper_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(raw_ofdm_mapper_sptr self) -> raw_ofdm_mapper *"""
        return _raw_ofdm.raw_ofdm_mapper_sptr___deref__(self)

    __swig_destroy__ = _raw_ofdm.delete_raw_ofdm_mapper_sptr
    __del__ = lambda self: None

    def history(self):
        """history(raw_ofdm_mapper_sptr self) -> unsigned int"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(raw_ofdm_mapper_sptr self, int which, int delay)
        declare_sample_delay(raw_ofdm_mapper_sptr self, unsigned int delay)
        """
        return _raw_ofdm.raw_ofdm_mapper_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(raw_ofdm_mapper_sptr self, int which) -> unsigned int"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(raw_ofdm_mapper_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(raw_ofdm_mapper_sptr self) -> double"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_relative_rate(self)


    def start(self):
        """start(raw_ofdm_mapper_sptr self) -> bool"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_start(self)


    def stop(self):
        """stop(raw_ofdm_mapper_sptr self) -> bool"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(raw_ofdm_mapper_sptr self, unsigned int which_input) -> uint64_t"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(raw_ofdm_mapper_sptr self, unsigned int which_output) -> uint64_t"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(raw_ofdm_mapper_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(raw_ofdm_mapper_sptr self, int m)"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(raw_ofdm_mapper_sptr self)"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(raw_ofdm_mapper_sptr self) -> bool"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(raw_ofdm_mapper_sptr self, int m)"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(raw_ofdm_mapper_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(raw_ofdm_mapper_sptr self, int i) -> long"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(raw_ofdm_mapper_sptr self, long max_output_buffer)
        set_max_output_buffer(raw_ofdm_mapper_sptr self, int port, long max_output_buffer)
        """
        return _raw_ofdm.raw_ofdm_mapper_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(raw_ofdm_mapper_sptr self, int i) -> long"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(raw_ofdm_mapper_sptr self, long min_output_buffer)
        set_min_output_buffer(raw_ofdm_mapper_sptr self, int port, long min_output_buffer)
        """
        return _raw_ofdm.raw_ofdm_mapper_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(raw_ofdm_mapper_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(raw_ofdm_mapper_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(raw_ofdm_mapper_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(raw_ofdm_mapper_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(raw_ofdm_mapper_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(raw_ofdm_mapper_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(raw_ofdm_mapper_sptr self, int which) -> float
        pc_input_buffers_full(raw_ofdm_mapper_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_mapper_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(raw_ofdm_mapper_sptr self, int which) -> float
        pc_input_buffers_full_avg(raw_ofdm_mapper_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_mapper_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(raw_ofdm_mapper_sptr self, int which) -> float
        pc_input_buffers_full_var(raw_ofdm_mapper_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_mapper_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(raw_ofdm_mapper_sptr self, int which) -> float
        pc_output_buffers_full(raw_ofdm_mapper_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_mapper_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(raw_ofdm_mapper_sptr self, int which) -> float
        pc_output_buffers_full_avg(raw_ofdm_mapper_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_mapper_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(raw_ofdm_mapper_sptr self, int which) -> float
        pc_output_buffers_full_var(raw_ofdm_mapper_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_mapper_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(raw_ofdm_mapper_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(raw_ofdm_mapper_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(raw_ofdm_mapper_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(raw_ofdm_mapper_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(raw_ofdm_mapper_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(raw_ofdm_mapper_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(raw_ofdm_mapper_sptr self)"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(raw_ofdm_mapper_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(raw_ofdm_mapper_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(raw_ofdm_mapper_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(raw_ofdm_mapper_sptr self, int priority) -> int"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(raw_ofdm_mapper_sptr self) -> std::string"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_name(self)


    def symbol_name(self):
        """symbol_name(raw_ofdm_mapper_sptr self) -> std::string"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(raw_ofdm_mapper_sptr self) -> io_signature_sptr"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(raw_ofdm_mapper_sptr self) -> io_signature_sptr"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(raw_ofdm_mapper_sptr self) -> long"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(raw_ofdm_mapper_sptr self) -> basic_block_sptr"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(raw_ofdm_mapper_sptr self, int ninputs, int noutputs) -> bool"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(raw_ofdm_mapper_sptr self) -> std::string"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(raw_ofdm_mapper_sptr self, std::string name)"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(raw_ofdm_mapper_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _raw_ofdm.raw_ofdm_mapper_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(raw_ofdm_mapper_sptr self) -> swig_int_ptr"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(raw_ofdm_mapper_sptr self) -> swig_int_ptr"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(raw_ofdm_mapper_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _raw_ofdm.raw_ofdm_mapper_sptr_message_subscribers(self, which_port)

raw_ofdm_mapper_sptr_swigregister = _raw_ofdm.raw_ofdm_mapper_sptr_swigregister
raw_ofdm_mapper_sptr_swigregister(raw_ofdm_mapper_sptr)


raw_ofdm_mapper_sptr.__repr__ = lambda self: "<raw_block %s (%d)>" % (self.name(), self.unique_id ())


def ofdm_mapper(carrier_map, node_type=0):
    """ofdm_mapper(std::vector< int,std::allocator< int > > carrier_map, unsigned int node_type=0) -> raw_ofdm_mapper_sptr"""
    return _raw_ofdm.ofdm_mapper(carrier_map, node_type)
class raw_ofdm_sampler_sptr(object):
    """Proxy of C++ boost::shared_ptr<(raw_ofdm_sampler)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(raw_ofdm_sampler)> self) -> raw_ofdm_sampler_sptr
        __init__(boost::shared_ptr<(raw_ofdm_sampler)> self, raw_ofdm_sampler * p) -> raw_ofdm_sampler_sptr
        """
        this = _raw_ofdm.new_raw_ofdm_sampler_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(raw_ofdm_sampler_sptr self) -> raw_ofdm_sampler *"""
        return _raw_ofdm.raw_ofdm_sampler_sptr___deref__(self)

    __swig_destroy__ = _raw_ofdm.delete_raw_ofdm_sampler_sptr
    __del__ = lambda self: None

    def get_init_pctime(self):
        """get_init_pctime(raw_ofdm_sampler_sptr self) -> double"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_get_init_pctime(self)


    def get_init_hwtime(self):
        """get_init_hwtime(raw_ofdm_sampler_sptr self) -> double"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_get_init_hwtime(self)


    def get_current_hwtime(self):
        """get_current_hwtime(raw_ofdm_sampler_sptr self) -> double"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_get_current_hwtime(self)


    def set_relay_flag(self, flag):
        """set_relay_flag(raw_ofdm_sampler_sptr self, bool flag) -> bool"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_set_relay_flag(self, flag)


    def history(self):
        """history(raw_ofdm_sampler_sptr self) -> unsigned int"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(raw_ofdm_sampler_sptr self, int which, int delay)
        declare_sample_delay(raw_ofdm_sampler_sptr self, unsigned int delay)
        """
        return _raw_ofdm.raw_ofdm_sampler_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(raw_ofdm_sampler_sptr self, int which) -> unsigned int"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(raw_ofdm_sampler_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(raw_ofdm_sampler_sptr self) -> double"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_relative_rate(self)


    def start(self):
        """start(raw_ofdm_sampler_sptr self) -> bool"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_start(self)


    def stop(self):
        """stop(raw_ofdm_sampler_sptr self) -> bool"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(raw_ofdm_sampler_sptr self, unsigned int which_input) -> uint64_t"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(raw_ofdm_sampler_sptr self, unsigned int which_output) -> uint64_t"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(raw_ofdm_sampler_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(raw_ofdm_sampler_sptr self, int m)"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(raw_ofdm_sampler_sptr self)"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(raw_ofdm_sampler_sptr self) -> bool"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(raw_ofdm_sampler_sptr self, int m)"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(raw_ofdm_sampler_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(raw_ofdm_sampler_sptr self, int i) -> long"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(raw_ofdm_sampler_sptr self, long max_output_buffer)
        set_max_output_buffer(raw_ofdm_sampler_sptr self, int port, long max_output_buffer)
        """
        return _raw_ofdm.raw_ofdm_sampler_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(raw_ofdm_sampler_sptr self, int i) -> long"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(raw_ofdm_sampler_sptr self, long min_output_buffer)
        set_min_output_buffer(raw_ofdm_sampler_sptr self, int port, long min_output_buffer)
        """
        return _raw_ofdm.raw_ofdm_sampler_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(raw_ofdm_sampler_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(raw_ofdm_sampler_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(raw_ofdm_sampler_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(raw_ofdm_sampler_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(raw_ofdm_sampler_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(raw_ofdm_sampler_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(raw_ofdm_sampler_sptr self, int which) -> float
        pc_input_buffers_full(raw_ofdm_sampler_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_sampler_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(raw_ofdm_sampler_sptr self, int which) -> float
        pc_input_buffers_full_avg(raw_ofdm_sampler_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_sampler_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(raw_ofdm_sampler_sptr self, int which) -> float
        pc_input_buffers_full_var(raw_ofdm_sampler_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_sampler_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(raw_ofdm_sampler_sptr self, int which) -> float
        pc_output_buffers_full(raw_ofdm_sampler_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_sampler_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(raw_ofdm_sampler_sptr self, int which) -> float
        pc_output_buffers_full_avg(raw_ofdm_sampler_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_sampler_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(raw_ofdm_sampler_sptr self, int which) -> float
        pc_output_buffers_full_var(raw_ofdm_sampler_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_sampler_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(raw_ofdm_sampler_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(raw_ofdm_sampler_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(raw_ofdm_sampler_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(raw_ofdm_sampler_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(raw_ofdm_sampler_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(raw_ofdm_sampler_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(raw_ofdm_sampler_sptr self)"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(raw_ofdm_sampler_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(raw_ofdm_sampler_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(raw_ofdm_sampler_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(raw_ofdm_sampler_sptr self, int priority) -> int"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(raw_ofdm_sampler_sptr self) -> std::string"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_name(self)


    def symbol_name(self):
        """symbol_name(raw_ofdm_sampler_sptr self) -> std::string"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(raw_ofdm_sampler_sptr self) -> io_signature_sptr"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(raw_ofdm_sampler_sptr self) -> io_signature_sptr"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(raw_ofdm_sampler_sptr self) -> long"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(raw_ofdm_sampler_sptr self) -> basic_block_sptr"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(raw_ofdm_sampler_sptr self, int ninputs, int noutputs) -> bool"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(raw_ofdm_sampler_sptr self) -> std::string"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(raw_ofdm_sampler_sptr self, std::string name)"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(raw_ofdm_sampler_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _raw_ofdm.raw_ofdm_sampler_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(raw_ofdm_sampler_sptr self) -> swig_int_ptr"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(raw_ofdm_sampler_sptr self) -> swig_int_ptr"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(raw_ofdm_sampler_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _raw_ofdm.raw_ofdm_sampler_sptr_message_subscribers(self, which_port)

raw_ofdm_sampler_sptr_swigregister = _raw_ofdm.raw_ofdm_sampler_sptr_swigregister
raw_ofdm_sampler_sptr_swigregister(raw_ofdm_sampler_sptr)


raw_ofdm_sampler_sptr.__repr__ = lambda self: "<raw_block %s (%d)>" % (self.name(), self.unique_id ())


def ofdm_sampler(fft_length, symbol_length, bandwidth, timeout=1000, debug=False):
    """ofdm_sampler(unsigned int fft_length, unsigned int symbol_length, unsigned int bandwidth, unsigned int timeout=1000, bool debug=False) -> raw_ofdm_sampler_sptr"""
    return _raw_ofdm.ofdm_sampler(fft_length, symbol_length, bandwidth, timeout, debug)
class raw_ofdm_insert_preamble_sptr(object):
    """Proxy of C++ boost::shared_ptr<(raw_ofdm_insert_preamble)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(raw_ofdm_insert_preamble)> self) -> raw_ofdm_insert_preamble_sptr
        __init__(boost::shared_ptr<(raw_ofdm_insert_preamble)> self, raw_ofdm_insert_preamble * p) -> raw_ofdm_insert_preamble_sptr
        """
        this = _raw_ofdm.new_raw_ofdm_insert_preamble_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(raw_ofdm_insert_preamble_sptr self) -> raw_ofdm_insert_preamble *"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr___deref__(self)

    __swig_destroy__ = _raw_ofdm.delete_raw_ofdm_insert_preamble_sptr
    __del__ = lambda self: None

    def history(self):
        """history(raw_ofdm_insert_preamble_sptr self) -> unsigned int"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(raw_ofdm_insert_preamble_sptr self, int which, int delay)
        declare_sample_delay(raw_ofdm_insert_preamble_sptr self, unsigned int delay)
        """
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(raw_ofdm_insert_preamble_sptr self, int which) -> unsigned int"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(raw_ofdm_insert_preamble_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(raw_ofdm_insert_preamble_sptr self) -> double"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_relative_rate(self)


    def start(self):
        """start(raw_ofdm_insert_preamble_sptr self) -> bool"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_start(self)


    def stop(self):
        """stop(raw_ofdm_insert_preamble_sptr self) -> bool"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(raw_ofdm_insert_preamble_sptr self, unsigned int which_input) -> uint64_t"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(raw_ofdm_insert_preamble_sptr self, unsigned int which_output) -> uint64_t"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(raw_ofdm_insert_preamble_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(raw_ofdm_insert_preamble_sptr self, int m)"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(raw_ofdm_insert_preamble_sptr self)"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(raw_ofdm_insert_preamble_sptr self) -> bool"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(raw_ofdm_insert_preamble_sptr self, int m)"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(raw_ofdm_insert_preamble_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(raw_ofdm_insert_preamble_sptr self, int i) -> long"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(raw_ofdm_insert_preamble_sptr self, long max_output_buffer)
        set_max_output_buffer(raw_ofdm_insert_preamble_sptr self, int port, long max_output_buffer)
        """
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(raw_ofdm_insert_preamble_sptr self, int i) -> long"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(raw_ofdm_insert_preamble_sptr self, long min_output_buffer)
        set_min_output_buffer(raw_ofdm_insert_preamble_sptr self, int port, long min_output_buffer)
        """
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(raw_ofdm_insert_preamble_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(raw_ofdm_insert_preamble_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(raw_ofdm_insert_preamble_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(raw_ofdm_insert_preamble_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(raw_ofdm_insert_preamble_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(raw_ofdm_insert_preamble_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(raw_ofdm_insert_preamble_sptr self, int which) -> float
        pc_input_buffers_full(raw_ofdm_insert_preamble_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(raw_ofdm_insert_preamble_sptr self, int which) -> float
        pc_input_buffers_full_avg(raw_ofdm_insert_preamble_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(raw_ofdm_insert_preamble_sptr self, int which) -> float
        pc_input_buffers_full_var(raw_ofdm_insert_preamble_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(raw_ofdm_insert_preamble_sptr self, int which) -> float
        pc_output_buffers_full(raw_ofdm_insert_preamble_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(raw_ofdm_insert_preamble_sptr self, int which) -> float
        pc_output_buffers_full_avg(raw_ofdm_insert_preamble_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(raw_ofdm_insert_preamble_sptr self, int which) -> float
        pc_output_buffers_full_var(raw_ofdm_insert_preamble_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(raw_ofdm_insert_preamble_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(raw_ofdm_insert_preamble_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(raw_ofdm_insert_preamble_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(raw_ofdm_insert_preamble_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(raw_ofdm_insert_preamble_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(raw_ofdm_insert_preamble_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(raw_ofdm_insert_preamble_sptr self)"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(raw_ofdm_insert_preamble_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(raw_ofdm_insert_preamble_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(raw_ofdm_insert_preamble_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(raw_ofdm_insert_preamble_sptr self, int priority) -> int"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(raw_ofdm_insert_preamble_sptr self) -> std::string"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_name(self)


    def symbol_name(self):
        """symbol_name(raw_ofdm_insert_preamble_sptr self) -> std::string"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(raw_ofdm_insert_preamble_sptr self) -> io_signature_sptr"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(raw_ofdm_insert_preamble_sptr self) -> io_signature_sptr"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(raw_ofdm_insert_preamble_sptr self) -> long"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(raw_ofdm_insert_preamble_sptr self) -> basic_block_sptr"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(raw_ofdm_insert_preamble_sptr self, int ninputs, int noutputs) -> bool"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(raw_ofdm_insert_preamble_sptr self) -> std::string"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(raw_ofdm_insert_preamble_sptr self, std::string name)"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(raw_ofdm_insert_preamble_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(raw_ofdm_insert_preamble_sptr self) -> swig_int_ptr"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(raw_ofdm_insert_preamble_sptr self) -> swig_int_ptr"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(raw_ofdm_insert_preamble_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _raw_ofdm.raw_ofdm_insert_preamble_sptr_message_subscribers(self, which_port)

raw_ofdm_insert_preamble_sptr_swigregister = _raw_ofdm.raw_ofdm_insert_preamble_sptr_swigregister
raw_ofdm_insert_preamble_sptr_swigregister(raw_ofdm_insert_preamble_sptr)


raw_ofdm_insert_preamble_sptr.__repr__ = lambda self: "<raw_block %s (%d)>" % (self.name(), self.unique_id ())


def ofdm_insert_preamble(fft_length, preamble):
    """ofdm_insert_preamble(int fft_length, gr_vector_vector_complexf preamble) -> raw_ofdm_insert_preamble_sptr"""
    return _raw_ofdm.ofdm_insert_preamble(fft_length, preamble)
class raw_ofdm_cyclic_prefixer_sptr(object):
    """Proxy of C++ boost::shared_ptr<(raw_ofdm_cyclic_prefixer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(raw_ofdm_cyclic_prefixer)> self) -> raw_ofdm_cyclic_prefixer_sptr
        __init__(boost::shared_ptr<(raw_ofdm_cyclic_prefixer)> self, raw_ofdm_cyclic_prefixer * p) -> raw_ofdm_cyclic_prefixer_sptr
        """
        this = _raw_ofdm.new_raw_ofdm_cyclic_prefixer_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(raw_ofdm_cyclic_prefixer_sptr self) -> raw_ofdm_cyclic_prefixer *"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr___deref__(self)

    __swig_destroy__ = _raw_ofdm.delete_raw_ofdm_cyclic_prefixer_sptr
    __del__ = lambda self: None

    def history(self):
        """history(raw_ofdm_cyclic_prefixer_sptr self) -> unsigned int"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(raw_ofdm_cyclic_prefixer_sptr self, int which, int delay)
        declare_sample_delay(raw_ofdm_cyclic_prefixer_sptr self, unsigned int delay)
        """
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(raw_ofdm_cyclic_prefixer_sptr self, int which) -> unsigned int"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(raw_ofdm_cyclic_prefixer_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(raw_ofdm_cyclic_prefixer_sptr self) -> double"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_relative_rate(self)


    def start(self):
        """start(raw_ofdm_cyclic_prefixer_sptr self) -> bool"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_start(self)


    def stop(self):
        """stop(raw_ofdm_cyclic_prefixer_sptr self) -> bool"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(raw_ofdm_cyclic_prefixer_sptr self, unsigned int which_input) -> uint64_t"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(raw_ofdm_cyclic_prefixer_sptr self, unsigned int which_output) -> uint64_t"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(raw_ofdm_cyclic_prefixer_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(raw_ofdm_cyclic_prefixer_sptr self, int m)"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(raw_ofdm_cyclic_prefixer_sptr self)"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(raw_ofdm_cyclic_prefixer_sptr self) -> bool"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(raw_ofdm_cyclic_prefixer_sptr self, int m)"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(raw_ofdm_cyclic_prefixer_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(raw_ofdm_cyclic_prefixer_sptr self, int i) -> long"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(raw_ofdm_cyclic_prefixer_sptr self, long max_output_buffer)
        set_max_output_buffer(raw_ofdm_cyclic_prefixer_sptr self, int port, long max_output_buffer)
        """
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(raw_ofdm_cyclic_prefixer_sptr self, int i) -> long"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(raw_ofdm_cyclic_prefixer_sptr self, long min_output_buffer)
        set_min_output_buffer(raw_ofdm_cyclic_prefixer_sptr self, int port, long min_output_buffer)
        """
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(raw_ofdm_cyclic_prefixer_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(raw_ofdm_cyclic_prefixer_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(raw_ofdm_cyclic_prefixer_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(raw_ofdm_cyclic_prefixer_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(raw_ofdm_cyclic_prefixer_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(raw_ofdm_cyclic_prefixer_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(raw_ofdm_cyclic_prefixer_sptr self, int which) -> float
        pc_input_buffers_full(raw_ofdm_cyclic_prefixer_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(raw_ofdm_cyclic_prefixer_sptr self, int which) -> float
        pc_input_buffers_full_avg(raw_ofdm_cyclic_prefixer_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(raw_ofdm_cyclic_prefixer_sptr self, int which) -> float
        pc_input_buffers_full_var(raw_ofdm_cyclic_prefixer_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(raw_ofdm_cyclic_prefixer_sptr self, int which) -> float
        pc_output_buffers_full(raw_ofdm_cyclic_prefixer_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(raw_ofdm_cyclic_prefixer_sptr self, int which) -> float
        pc_output_buffers_full_avg(raw_ofdm_cyclic_prefixer_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(raw_ofdm_cyclic_prefixer_sptr self, int which) -> float
        pc_output_buffers_full_var(raw_ofdm_cyclic_prefixer_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(raw_ofdm_cyclic_prefixer_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(raw_ofdm_cyclic_prefixer_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(raw_ofdm_cyclic_prefixer_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(raw_ofdm_cyclic_prefixer_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(raw_ofdm_cyclic_prefixer_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(raw_ofdm_cyclic_prefixer_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(raw_ofdm_cyclic_prefixer_sptr self)"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(raw_ofdm_cyclic_prefixer_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(raw_ofdm_cyclic_prefixer_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(raw_ofdm_cyclic_prefixer_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(raw_ofdm_cyclic_prefixer_sptr self, int priority) -> int"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(raw_ofdm_cyclic_prefixer_sptr self) -> std::string"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_name(self)


    def symbol_name(self):
        """symbol_name(raw_ofdm_cyclic_prefixer_sptr self) -> std::string"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(raw_ofdm_cyclic_prefixer_sptr self) -> io_signature_sptr"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(raw_ofdm_cyclic_prefixer_sptr self) -> io_signature_sptr"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(raw_ofdm_cyclic_prefixer_sptr self) -> long"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(raw_ofdm_cyclic_prefixer_sptr self) -> basic_block_sptr"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(raw_ofdm_cyclic_prefixer_sptr self, int ninputs, int noutputs) -> bool"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(raw_ofdm_cyclic_prefixer_sptr self) -> std::string"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(raw_ofdm_cyclic_prefixer_sptr self, std::string name)"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(raw_ofdm_cyclic_prefixer_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(raw_ofdm_cyclic_prefixer_sptr self) -> swig_int_ptr"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(raw_ofdm_cyclic_prefixer_sptr self) -> swig_int_ptr"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(raw_ofdm_cyclic_prefixer_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_message_subscribers(self, which_port)

raw_ofdm_cyclic_prefixer_sptr_swigregister = _raw_ofdm.raw_ofdm_cyclic_prefixer_sptr_swigregister
raw_ofdm_cyclic_prefixer_sptr_swigregister(raw_ofdm_cyclic_prefixer_sptr)


raw_ofdm_cyclic_prefixer_sptr.__repr__ = lambda self: "<raw_block %s (%d)>" % (self.name(), self.unique_id ())


def ofdm_cyclic_prefixer(input_size, output_size):
    """ofdm_cyclic_prefixer(size_t input_size, size_t output_size) -> raw_ofdm_cyclic_prefixer_sptr"""
    return _raw_ofdm.ofdm_cyclic_prefixer(input_size, output_size)
class raw_ofdm_demod_sptr(object):
    """Proxy of C++ boost::shared_ptr<(raw_ofdm_demod)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(raw_ofdm_demod)> self) -> raw_ofdm_demod_sptr
        __init__(boost::shared_ptr<(raw_ofdm_demod)> self, raw_ofdm_demod * p) -> raw_ofdm_demod_sptr
        """
        this = _raw_ofdm.new_raw_ofdm_demod_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(raw_ofdm_demod_sptr self) -> raw_ofdm_demod *"""
        return _raw_ofdm.raw_ofdm_demod_sptr___deref__(self)

    __swig_destroy__ = _raw_ofdm.delete_raw_ofdm_demod_sptr
    __del__ = lambda self: None

    def set_min_symbols(self, val):
        """set_min_symbols(raw_ofdm_demod_sptr self, int val)"""
        return _raw_ofdm.raw_ofdm_demod_sptr_set_min_symbols(self, val)


    def history(self):
        """history(raw_ofdm_demod_sptr self) -> unsigned int"""
        return _raw_ofdm.raw_ofdm_demod_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(raw_ofdm_demod_sptr self, int which, int delay)
        declare_sample_delay(raw_ofdm_demod_sptr self, unsigned int delay)
        """
        return _raw_ofdm.raw_ofdm_demod_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(raw_ofdm_demod_sptr self, int which) -> unsigned int"""
        return _raw_ofdm.raw_ofdm_demod_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(raw_ofdm_demod_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_demod_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(raw_ofdm_demod_sptr self) -> double"""
        return _raw_ofdm.raw_ofdm_demod_sptr_relative_rate(self)


    def start(self):
        """start(raw_ofdm_demod_sptr self) -> bool"""
        return _raw_ofdm.raw_ofdm_demod_sptr_start(self)


    def stop(self):
        """stop(raw_ofdm_demod_sptr self) -> bool"""
        return _raw_ofdm.raw_ofdm_demod_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(raw_ofdm_demod_sptr self, unsigned int which_input) -> uint64_t"""
        return _raw_ofdm.raw_ofdm_demod_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(raw_ofdm_demod_sptr self, unsigned int which_output) -> uint64_t"""
        return _raw_ofdm.raw_ofdm_demod_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(raw_ofdm_demod_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_demod_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(raw_ofdm_demod_sptr self, int m)"""
        return _raw_ofdm.raw_ofdm_demod_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(raw_ofdm_demod_sptr self)"""
        return _raw_ofdm.raw_ofdm_demod_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(raw_ofdm_demod_sptr self) -> bool"""
        return _raw_ofdm.raw_ofdm_demod_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(raw_ofdm_demod_sptr self, int m)"""
        return _raw_ofdm.raw_ofdm_demod_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(raw_ofdm_demod_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_demod_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(raw_ofdm_demod_sptr self, int i) -> long"""
        return _raw_ofdm.raw_ofdm_demod_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(raw_ofdm_demod_sptr self, long max_output_buffer)
        set_max_output_buffer(raw_ofdm_demod_sptr self, int port, long max_output_buffer)
        """
        return _raw_ofdm.raw_ofdm_demod_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(raw_ofdm_demod_sptr self, int i) -> long"""
        return _raw_ofdm.raw_ofdm_demod_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(raw_ofdm_demod_sptr self, long min_output_buffer)
        set_min_output_buffer(raw_ofdm_demod_sptr self, int port, long min_output_buffer)
        """
        return _raw_ofdm.raw_ofdm_demod_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(raw_ofdm_demod_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_demod_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(raw_ofdm_demod_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_demod_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(raw_ofdm_demod_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_demod_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(raw_ofdm_demod_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_demod_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(raw_ofdm_demod_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_demod_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(raw_ofdm_demod_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_demod_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(raw_ofdm_demod_sptr self, int which) -> float
        pc_input_buffers_full(raw_ofdm_demod_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_demod_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(raw_ofdm_demod_sptr self, int which) -> float
        pc_input_buffers_full_avg(raw_ofdm_demod_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_demod_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(raw_ofdm_demod_sptr self, int which) -> float
        pc_input_buffers_full_var(raw_ofdm_demod_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_demod_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(raw_ofdm_demod_sptr self, int which) -> float
        pc_output_buffers_full(raw_ofdm_demod_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_demod_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(raw_ofdm_demod_sptr self, int which) -> float
        pc_output_buffers_full_avg(raw_ofdm_demod_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_demod_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(raw_ofdm_demod_sptr self, int which) -> float
        pc_output_buffers_full_var(raw_ofdm_demod_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_demod_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(raw_ofdm_demod_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_demod_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(raw_ofdm_demod_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_demod_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(raw_ofdm_demod_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_demod_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(raw_ofdm_demod_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_demod_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(raw_ofdm_demod_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_demod_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(raw_ofdm_demod_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _raw_ofdm.raw_ofdm_demod_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(raw_ofdm_demod_sptr self)"""
        return _raw_ofdm.raw_ofdm_demod_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(raw_ofdm_demod_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _raw_ofdm.raw_ofdm_demod_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(raw_ofdm_demod_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_demod_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(raw_ofdm_demod_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_demod_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(raw_ofdm_demod_sptr self, int priority) -> int"""
        return _raw_ofdm.raw_ofdm_demod_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(raw_ofdm_demod_sptr self) -> std::string"""
        return _raw_ofdm.raw_ofdm_demod_sptr_name(self)


    def symbol_name(self):
        """symbol_name(raw_ofdm_demod_sptr self) -> std::string"""
        return _raw_ofdm.raw_ofdm_demod_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(raw_ofdm_demod_sptr self) -> io_signature_sptr"""
        return _raw_ofdm.raw_ofdm_demod_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(raw_ofdm_demod_sptr self) -> io_signature_sptr"""
        return _raw_ofdm.raw_ofdm_demod_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(raw_ofdm_demod_sptr self) -> long"""
        return _raw_ofdm.raw_ofdm_demod_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(raw_ofdm_demod_sptr self) -> basic_block_sptr"""
        return _raw_ofdm.raw_ofdm_demod_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(raw_ofdm_demod_sptr self, int ninputs, int noutputs) -> bool"""
        return _raw_ofdm.raw_ofdm_demod_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(raw_ofdm_demod_sptr self) -> std::string"""
        return _raw_ofdm.raw_ofdm_demod_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(raw_ofdm_demod_sptr self, std::string name)"""
        return _raw_ofdm.raw_ofdm_demod_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(raw_ofdm_demod_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _raw_ofdm.raw_ofdm_demod_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(raw_ofdm_demod_sptr self) -> swig_int_ptr"""
        return _raw_ofdm.raw_ofdm_demod_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(raw_ofdm_demod_sptr self) -> swig_int_ptr"""
        return _raw_ofdm.raw_ofdm_demod_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(raw_ofdm_demod_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _raw_ofdm.raw_ofdm_demod_sptr_message_subscribers(self, which_port)

raw_ofdm_demod_sptr_swigregister = _raw_ofdm.raw_ofdm_demod_sptr_swigregister
raw_ofdm_demod_sptr_swigregister(raw_ofdm_demod_sptr)


raw_ofdm_demod_sptr.__repr__ = lambda self: "<raw_block %s (%d)>" % (self.name(), self.unique_id ())


def ofdm_demod(fft_length, data_tones, cplen, preamble, carrier_map, num_data_symbol, nbits):
    """ofdm_demod(unsigned int fft_length, unsigned int data_tones, unsigned int cplen, gr_vector_vector_complexf preamble, std::vector< int,std::allocator< int > > carrier_map, unsigned int num_data_symbol, int nbits) -> raw_ofdm_demod_sptr"""
    return _raw_ofdm.ofdm_demod(fft_length, data_tones, cplen, preamble, carrier_map, num_data_symbol, nbits)
class raw_pnc_demod_sptr(object):
    """Proxy of C++ boost::shared_ptr<(raw_pnc_demod)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(raw_pnc_demod)> self) -> raw_pnc_demod_sptr
        __init__(boost::shared_ptr<(raw_pnc_demod)> self, raw_pnc_demod * p) -> raw_pnc_demod_sptr
        """
        this = _raw_ofdm.new_raw_pnc_demod_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(raw_pnc_demod_sptr self) -> raw_pnc_demod *"""
        return _raw_ofdm.raw_pnc_demod_sptr___deref__(self)

    __swig_destroy__ = _raw_ofdm.delete_raw_pnc_demod_sptr
    __del__ = lambda self: None

    def set_min_symbols(self, val):
        """set_min_symbols(raw_pnc_demod_sptr self, int val)"""
        return _raw_ofdm.raw_pnc_demod_sptr_set_min_symbols(self, val)


    def history(self):
        """history(raw_pnc_demod_sptr self) -> unsigned int"""
        return _raw_ofdm.raw_pnc_demod_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(raw_pnc_demod_sptr self, int which, int delay)
        declare_sample_delay(raw_pnc_demod_sptr self, unsigned int delay)
        """
        return _raw_ofdm.raw_pnc_demod_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(raw_pnc_demod_sptr self, int which) -> unsigned int"""
        return _raw_ofdm.raw_pnc_demod_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(raw_pnc_demod_sptr self) -> int"""
        return _raw_ofdm.raw_pnc_demod_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(raw_pnc_demod_sptr self) -> double"""
        return _raw_ofdm.raw_pnc_demod_sptr_relative_rate(self)


    def start(self):
        """start(raw_pnc_demod_sptr self) -> bool"""
        return _raw_ofdm.raw_pnc_demod_sptr_start(self)


    def stop(self):
        """stop(raw_pnc_demod_sptr self) -> bool"""
        return _raw_ofdm.raw_pnc_demod_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(raw_pnc_demod_sptr self, unsigned int which_input) -> uint64_t"""
        return _raw_ofdm.raw_pnc_demod_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(raw_pnc_demod_sptr self, unsigned int which_output) -> uint64_t"""
        return _raw_ofdm.raw_pnc_demod_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(raw_pnc_demod_sptr self) -> int"""
        return _raw_ofdm.raw_pnc_demod_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(raw_pnc_demod_sptr self, int m)"""
        return _raw_ofdm.raw_pnc_demod_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(raw_pnc_demod_sptr self)"""
        return _raw_ofdm.raw_pnc_demod_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(raw_pnc_demod_sptr self) -> bool"""
        return _raw_ofdm.raw_pnc_demod_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(raw_pnc_demod_sptr self, int m)"""
        return _raw_ofdm.raw_pnc_demod_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(raw_pnc_demod_sptr self) -> int"""
        return _raw_ofdm.raw_pnc_demod_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(raw_pnc_demod_sptr self, int i) -> long"""
        return _raw_ofdm.raw_pnc_demod_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(raw_pnc_demod_sptr self, long max_output_buffer)
        set_max_output_buffer(raw_pnc_demod_sptr self, int port, long max_output_buffer)
        """
        return _raw_ofdm.raw_pnc_demod_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(raw_pnc_demod_sptr self, int i) -> long"""
        return _raw_ofdm.raw_pnc_demod_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(raw_pnc_demod_sptr self, long min_output_buffer)
        set_min_output_buffer(raw_pnc_demod_sptr self, int port, long min_output_buffer)
        """
        return _raw_ofdm.raw_pnc_demod_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(raw_pnc_demod_sptr self) -> float"""
        return _raw_ofdm.raw_pnc_demod_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(raw_pnc_demod_sptr self) -> float"""
        return _raw_ofdm.raw_pnc_demod_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(raw_pnc_demod_sptr self) -> float"""
        return _raw_ofdm.raw_pnc_demod_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(raw_pnc_demod_sptr self) -> float"""
        return _raw_ofdm.raw_pnc_demod_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(raw_pnc_demod_sptr self) -> float"""
        return _raw_ofdm.raw_pnc_demod_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(raw_pnc_demod_sptr self) -> float"""
        return _raw_ofdm.raw_pnc_demod_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(raw_pnc_demod_sptr self, int which) -> float
        pc_input_buffers_full(raw_pnc_demod_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_pnc_demod_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(raw_pnc_demod_sptr self, int which) -> float
        pc_input_buffers_full_avg(raw_pnc_demod_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_pnc_demod_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(raw_pnc_demod_sptr self, int which) -> float
        pc_input_buffers_full_var(raw_pnc_demod_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_pnc_demod_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(raw_pnc_demod_sptr self, int which) -> float
        pc_output_buffers_full(raw_pnc_demod_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_pnc_demod_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(raw_pnc_demod_sptr self, int which) -> float
        pc_output_buffers_full_avg(raw_pnc_demod_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_pnc_demod_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(raw_pnc_demod_sptr self, int which) -> float
        pc_output_buffers_full_var(raw_pnc_demod_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_pnc_demod_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(raw_pnc_demod_sptr self) -> float"""
        return _raw_ofdm.raw_pnc_demod_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(raw_pnc_demod_sptr self) -> float"""
        return _raw_ofdm.raw_pnc_demod_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(raw_pnc_demod_sptr self) -> float"""
        return _raw_ofdm.raw_pnc_demod_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(raw_pnc_demod_sptr self) -> float"""
        return _raw_ofdm.raw_pnc_demod_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(raw_pnc_demod_sptr self) -> float"""
        return _raw_ofdm.raw_pnc_demod_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(raw_pnc_demod_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _raw_ofdm.raw_pnc_demod_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(raw_pnc_demod_sptr self)"""
        return _raw_ofdm.raw_pnc_demod_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(raw_pnc_demod_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _raw_ofdm.raw_pnc_demod_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(raw_pnc_demod_sptr self) -> int"""
        return _raw_ofdm.raw_pnc_demod_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(raw_pnc_demod_sptr self) -> int"""
        return _raw_ofdm.raw_pnc_demod_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(raw_pnc_demod_sptr self, int priority) -> int"""
        return _raw_ofdm.raw_pnc_demod_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(raw_pnc_demod_sptr self) -> std::string"""
        return _raw_ofdm.raw_pnc_demod_sptr_name(self)


    def symbol_name(self):
        """symbol_name(raw_pnc_demod_sptr self) -> std::string"""
        return _raw_ofdm.raw_pnc_demod_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(raw_pnc_demod_sptr self) -> io_signature_sptr"""
        return _raw_ofdm.raw_pnc_demod_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(raw_pnc_demod_sptr self) -> io_signature_sptr"""
        return _raw_ofdm.raw_pnc_demod_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(raw_pnc_demod_sptr self) -> long"""
        return _raw_ofdm.raw_pnc_demod_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(raw_pnc_demod_sptr self) -> basic_block_sptr"""
        return _raw_ofdm.raw_pnc_demod_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(raw_pnc_demod_sptr self, int ninputs, int noutputs) -> bool"""
        return _raw_ofdm.raw_pnc_demod_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(raw_pnc_demod_sptr self) -> std::string"""
        return _raw_ofdm.raw_pnc_demod_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(raw_pnc_demod_sptr self, std::string name)"""
        return _raw_ofdm.raw_pnc_demod_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(raw_pnc_demod_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _raw_ofdm.raw_pnc_demod_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(raw_pnc_demod_sptr self) -> swig_int_ptr"""
        return _raw_ofdm.raw_pnc_demod_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(raw_pnc_demod_sptr self) -> swig_int_ptr"""
        return _raw_ofdm.raw_pnc_demod_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(raw_pnc_demod_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _raw_ofdm.raw_pnc_demod_sptr_message_subscribers(self, which_port)

raw_pnc_demod_sptr_swigregister = _raw_ofdm.raw_pnc_demod_sptr_swigregister
raw_pnc_demod_sptr_swigregister(raw_pnc_demod_sptr)


raw_pnc_demod_sptr.__repr__ = lambda self: "<raw_block %s (%d)>" % (self.name(), self.unique_id ())


def pnc_demod(fft_length, data_tones, cplen, preamble, carrier_map, num_data_symbol, alpha, mode, nbits):
    """pnc_demod(unsigned int fft_length, unsigned int data_tones, unsigned int cplen, gr_vector_vector_complexf preamble, std::vector< int,std::allocator< int > > carrier_map, unsigned int num_data_symbol, float alpha, int mode, int nbits) -> raw_pnc_demod_sptr"""
    return _raw_ofdm.pnc_demod(fft_length, data_tones, cplen, preamble, carrier_map, num_data_symbol, alpha, mode, nbits)
class raw_ofdm_insert_amble_sptr(object):
    """Proxy of C++ boost::shared_ptr<(raw_ofdm_insert_amble)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(raw_ofdm_insert_amble)> self) -> raw_ofdm_insert_amble_sptr
        __init__(boost::shared_ptr<(raw_ofdm_insert_amble)> self, raw_ofdm_insert_amble * p) -> raw_ofdm_insert_amble_sptr
        """
        this = _raw_ofdm.new_raw_ofdm_insert_amble_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(raw_ofdm_insert_amble_sptr self) -> raw_ofdm_insert_amble *"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr___deref__(self)

    __swig_destroy__ = _raw_ofdm.delete_raw_ofdm_insert_amble_sptr
    __del__ = lambda self: None

    def history(self):
        """history(raw_ofdm_insert_amble_sptr self) -> unsigned int"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(raw_ofdm_insert_amble_sptr self, int which, int delay)
        declare_sample_delay(raw_ofdm_insert_amble_sptr self, unsigned int delay)
        """
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(raw_ofdm_insert_amble_sptr self, int which) -> unsigned int"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(raw_ofdm_insert_amble_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(raw_ofdm_insert_amble_sptr self) -> double"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_relative_rate(self)


    def start(self):
        """start(raw_ofdm_insert_amble_sptr self) -> bool"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_start(self)


    def stop(self):
        """stop(raw_ofdm_insert_amble_sptr self) -> bool"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(raw_ofdm_insert_amble_sptr self, unsigned int which_input) -> uint64_t"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(raw_ofdm_insert_amble_sptr self, unsigned int which_output) -> uint64_t"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(raw_ofdm_insert_amble_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(raw_ofdm_insert_amble_sptr self, int m)"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(raw_ofdm_insert_amble_sptr self)"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(raw_ofdm_insert_amble_sptr self) -> bool"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(raw_ofdm_insert_amble_sptr self, int m)"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(raw_ofdm_insert_amble_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(raw_ofdm_insert_amble_sptr self, int i) -> long"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(raw_ofdm_insert_amble_sptr self, long max_output_buffer)
        set_max_output_buffer(raw_ofdm_insert_amble_sptr self, int port, long max_output_buffer)
        """
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(raw_ofdm_insert_amble_sptr self, int i) -> long"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(raw_ofdm_insert_amble_sptr self, long min_output_buffer)
        set_min_output_buffer(raw_ofdm_insert_amble_sptr self, int port, long min_output_buffer)
        """
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(raw_ofdm_insert_amble_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(raw_ofdm_insert_amble_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(raw_ofdm_insert_amble_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(raw_ofdm_insert_amble_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(raw_ofdm_insert_amble_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(raw_ofdm_insert_amble_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(raw_ofdm_insert_amble_sptr self, int which) -> float
        pc_input_buffers_full(raw_ofdm_insert_amble_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(raw_ofdm_insert_amble_sptr self, int which) -> float
        pc_input_buffers_full_avg(raw_ofdm_insert_amble_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(raw_ofdm_insert_amble_sptr self, int which) -> float
        pc_input_buffers_full_var(raw_ofdm_insert_amble_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(raw_ofdm_insert_amble_sptr self, int which) -> float
        pc_output_buffers_full(raw_ofdm_insert_amble_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(raw_ofdm_insert_amble_sptr self, int which) -> float
        pc_output_buffers_full_avg(raw_ofdm_insert_amble_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(raw_ofdm_insert_amble_sptr self, int which) -> float
        pc_output_buffers_full_var(raw_ofdm_insert_amble_sptr self) -> pmt_vector_float
        """
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(raw_ofdm_insert_amble_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(raw_ofdm_insert_amble_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(raw_ofdm_insert_amble_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(raw_ofdm_insert_amble_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(raw_ofdm_insert_amble_sptr self) -> float"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(raw_ofdm_insert_amble_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(raw_ofdm_insert_amble_sptr self)"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(raw_ofdm_insert_amble_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(raw_ofdm_insert_amble_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(raw_ofdm_insert_amble_sptr self) -> int"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(raw_ofdm_insert_amble_sptr self, int priority) -> int"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(raw_ofdm_insert_amble_sptr self) -> std::string"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_name(self)


    def symbol_name(self):
        """symbol_name(raw_ofdm_insert_amble_sptr self) -> std::string"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(raw_ofdm_insert_amble_sptr self) -> io_signature_sptr"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(raw_ofdm_insert_amble_sptr self) -> io_signature_sptr"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(raw_ofdm_insert_amble_sptr self) -> long"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(raw_ofdm_insert_amble_sptr self) -> basic_block_sptr"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(raw_ofdm_insert_amble_sptr self, int ninputs, int noutputs) -> bool"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(raw_ofdm_insert_amble_sptr self) -> std::string"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(raw_ofdm_insert_amble_sptr self, std::string name)"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(raw_ofdm_insert_amble_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(raw_ofdm_insert_amble_sptr self) -> swig_int_ptr"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(raw_ofdm_insert_amble_sptr self) -> swig_int_ptr"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(raw_ofdm_insert_amble_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _raw_ofdm.raw_ofdm_insert_amble_sptr_message_subscribers(self, which_port)

raw_ofdm_insert_amble_sptr_swigregister = _raw_ofdm.raw_ofdm_insert_amble_sptr_swigregister
raw_ofdm_insert_amble_sptr_swigregister(raw_ofdm_insert_amble_sptr)


raw_ofdm_insert_amble_sptr.__repr__ = lambda self: "<raw_block %s (%d)>" % (self.name(), self.unique_id ())


def ofdm_insert_amble(fft_length, ofdm_size, preamble, postamble):
    """ofdm_insert_amble(int fft_length, int ofdm_size, gr_vector_vector_complexf preamble, gr_vector_vector_complexf postamble) -> raw_ofdm_insert_amble_sptr"""
    return _raw_ofdm.ofdm_insert_amble(fft_length, ofdm_size, preamble, postamble)



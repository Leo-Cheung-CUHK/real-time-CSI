# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_raw_util')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_raw_util')
    _raw_util = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_raw_util', [dirname(__file__)])
        except ImportError:
            import _raw_util
            return _raw_util
        try:
            _mod = imp.load_module('_raw_util', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _raw_util = swig_import_helper()
    del swig_import_helper
else:
    import _raw_util
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _raw_util.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _raw_util.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _raw_util.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _raw_util.high_res_timer_epoch()
class raw_message_sptr(object):
    """Proxy of C++ boost::shared_ptr<(raw_message)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(raw_message)> self) -> raw_message_sptr
        __init__(boost::shared_ptr<(raw_message)> self, raw_message p) -> raw_message_sptr
        """
        this = _raw_util.new_raw_message_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(raw_message_sptr self) -> raw_message"""
        return _raw_util.raw_message_sptr___deref__(self)

    __swig_destroy__ = _raw_util.delete_raw_message_sptr
    __del__ = lambda self: None

    def type(self):
        """type(raw_message_sptr self) -> long"""
        return _raw_util.raw_message_sptr_type(self)


    def arg1(self):
        """arg1(raw_message_sptr self) -> double"""
        return _raw_util.raw_message_sptr_arg1(self)


    def arg2(self):
        """arg2(raw_message_sptr self) -> double"""
        return _raw_util.raw_message_sptr_arg2(self)


    def timestamp_valid(self):
        """timestamp_valid(raw_message_sptr self) -> bool"""
        return _raw_util.raw_message_sptr_timestamp_valid(self)


    def timestamp_sec(self):
        """timestamp_sec(raw_message_sptr self) -> uint64_t"""
        return _raw_util.raw_message_sptr_timestamp_sec(self)


    def timestamp_frac_sec(self):
        """timestamp_frac_sec(raw_message_sptr self) -> double"""
        return _raw_util.raw_message_sptr_timestamp_frac_sec(self)


    def pctime_sec(self):
        """pctime_sec(raw_message_sptr self) -> double"""
        return _raw_util.raw_message_sptr_pctime_sec(self)


    def pctime_frac_sec(self):
        """pctime_frac_sec(raw_message_sptr self) -> double"""
        return _raw_util.raw_message_sptr_pctime_frac_sec(self)


    def cfo_valid(self):
        """cfo_valid(raw_message_sptr self) -> bool"""
        return _raw_util.raw_message_sptr_cfo_valid(self)


    def rssi_valid(self):
        """rssi_valid(raw_message_sptr self) -> bool"""
        return _raw_util.raw_message_sptr_rssi_valid(self)


    def snr_value(self):
        """snr_value(raw_message_sptr self) -> double"""
        return _raw_util.raw_message_sptr_snr_value(self)


    def get_snr_values(self):
        """get_snr_values(raw_message_sptr self) -> pmt_vector_double"""
        return _raw_util.raw_message_sptr_get_snr_values(self)


    def power_list(self):
        """power_list(raw_message_sptr self) -> pmt_vector_double"""
        return _raw_util.raw_message_sptr_power_list(self)


    def power_list2(self):
        """power_list2(raw_message_sptr self) -> pmt_vector_double"""
        return _raw_util.raw_message_sptr_power_list2(self)


    def cfo_values(self):
        """cfo_values(raw_message_sptr self) -> pmt_vector_double"""
        return _raw_util.raw_message_sptr_cfo_values(self)


    def rssi_values(self):
        """rssi_values(raw_message_sptr self) -> pmt_vector_double"""
        return _raw_util.raw_message_sptr_rssi_values(self)


    def set_type(self, type):
        """set_type(raw_message_sptr self, long type)"""
        return _raw_util.raw_message_sptr_set_type(self, type)


    def set_arg1(self, arg1):
        """set_arg1(raw_message_sptr self, double arg1)"""
        return _raw_util.raw_message_sptr_set_arg1(self, arg1)


    def set_arg2(self, arg2):
        """set_arg2(raw_message_sptr self, double arg2)"""
        return _raw_util.raw_message_sptr_set_arg2(self, arg2)


    def set_cfo(self, cfo_list):
        """set_cfo(raw_message_sptr self, pmt_vector_double cfo_list)"""
        return _raw_util.raw_message_sptr_set_cfo(self, cfo_list)


    def set_rssi(self, rssi_list):
        """set_rssi(raw_message_sptr self, pmt_vector_double rssi_list)"""
        return _raw_util.raw_message_sptr_set_rssi(self, rssi_list)


    def set_snr(self, snr):
        """set_snr(raw_message_sptr self, double snr)"""
        return _raw_util.raw_message_sptr_set_snr(self, snr)


    def set_snr_list(self, snr_list):
        """set_snr_list(raw_message_sptr self, pmt_vector_double snr_list)"""
        return _raw_util.raw_message_sptr_set_snr_list(self, snr_list)


    def set_power_list(self, power_list):
        """set_power_list(raw_message_sptr self, pmt_vector_double power_list)"""
        return _raw_util.raw_message_sptr_set_power_list(self, power_list)


    def set_power_list2(self, power_list):
        """set_power_list2(raw_message_sptr self, pmt_vector_double power_list)"""
        return _raw_util.raw_message_sptr_set_power_list2(self, power_list)


    def set_timestamp(self, ps, pfs):
        """set_timestamp(raw_message_sptr self, uint64_t ps, double pfs)"""
        return _raw_util.raw_message_sptr_set_timestamp(self, ps, pfs)


    def set_pctime(self, ps, pfs):
        """set_pctime(raw_message_sptr self, double ps, double pfs)"""
        return _raw_util.raw_message_sptr_set_pctime(self, ps, pfs)


    def get_decode_time(self):
        """get_decode_time(raw_message_sptr self) -> double"""
        return _raw_util.raw_message_sptr_get_decode_time(self)


    def get_user_type(self):
        """get_user_type(raw_message_sptr self) -> int"""
        return _raw_util.raw_message_sptr_get_user_type(self)


    def msg(self):
        """msg(raw_message_sptr self) -> unsigned char *"""
        return _raw_util.raw_message_sptr_msg(self)


    def length(self):
        """
        length(raw_message_sptr self) -> size_t

        Return the number of elements in v.
        """
        return _raw_util.raw_message_sptr_length(self)


    def to_string(self):
        """to_string(raw_message_sptr self) -> std::string"""
        return _raw_util.raw_message_sptr_to_string(self)

raw_message_sptr_swigregister = _raw_util.raw_message_sptr_swigregister
raw_message_sptr_swigregister(raw_message_sptr)


def message_from_string2(s, type=0, arg1=0, arg2=0):
    """message_from_string2(std::string const s, long type=0, double arg1=0, double arg2=0) -> raw_message_sptr"""
    return _raw_util.message_from_string2(s, type, arg1, arg2)

def message2(type=0, arg1=0, arg2=0, length=0):
    """message2(long type=0, double arg1=0, double arg2=0, size_t length=0) -> raw_message_sptr"""
    return _raw_util.message2(type, arg1, arg2, length)
class raw_message(object):
    """Proxy of C++ raw_message class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _raw_util.delete_raw_message
    __del__ = lambda self: None

    def type(self):
        """type(raw_message self) -> long"""
        return _raw_util.raw_message_type(self)


    def arg1(self):
        """arg1(raw_message self) -> double"""
        return _raw_util.raw_message_arg1(self)


    def arg2(self):
        """arg2(raw_message self) -> double"""
        return _raw_util.raw_message_arg2(self)


    def timestamp_valid(self):
        """timestamp_valid(raw_message self) -> bool"""
        return _raw_util.raw_message_timestamp_valid(self)


    def timestamp_sec(self):
        """timestamp_sec(raw_message self) -> uint64_t"""
        return _raw_util.raw_message_timestamp_sec(self)


    def timestamp_frac_sec(self):
        """timestamp_frac_sec(raw_message self) -> double"""
        return _raw_util.raw_message_timestamp_frac_sec(self)


    def pctime_sec(self):
        """pctime_sec(raw_message self) -> double"""
        return _raw_util.raw_message_pctime_sec(self)


    def pctime_frac_sec(self):
        """pctime_frac_sec(raw_message self) -> double"""
        return _raw_util.raw_message_pctime_frac_sec(self)


    def cfo_valid(self):
        """cfo_valid(raw_message self) -> bool"""
        return _raw_util.raw_message_cfo_valid(self)


    def rssi_valid(self):
        """rssi_valid(raw_message self) -> bool"""
        return _raw_util.raw_message_rssi_valid(self)


    def snr_value(self):
        """snr_value(raw_message self) -> double"""
        return _raw_util.raw_message_snr_value(self)


    def get_snr_values(self):
        """get_snr_values(raw_message self) -> pmt_vector_double"""
        return _raw_util.raw_message_get_snr_values(self)


    def power_list(self):
        """power_list(raw_message self) -> pmt_vector_double"""
        return _raw_util.raw_message_power_list(self)


    def power_list2(self):
        """power_list2(raw_message self) -> pmt_vector_double"""
        return _raw_util.raw_message_power_list2(self)


    def cfo_values(self):
        """cfo_values(raw_message self) -> pmt_vector_double"""
        return _raw_util.raw_message_cfo_values(self)


    def rssi_values(self):
        """rssi_values(raw_message self) -> pmt_vector_double"""
        return _raw_util.raw_message_rssi_values(self)


    def set_type(self, type):
        """set_type(raw_message self, long type)"""
        return _raw_util.raw_message_set_type(self, type)


    def set_arg1(self, arg1):
        """set_arg1(raw_message self, double arg1)"""
        return _raw_util.raw_message_set_arg1(self, arg1)


    def set_arg2(self, arg2):
        """set_arg2(raw_message self, double arg2)"""
        return _raw_util.raw_message_set_arg2(self, arg2)


    def set_cfo(self, cfo_list):
        """set_cfo(raw_message self, pmt_vector_double cfo_list)"""
        return _raw_util.raw_message_set_cfo(self, cfo_list)


    def set_rssi(self, rssi_list):
        """set_rssi(raw_message self, pmt_vector_double rssi_list)"""
        return _raw_util.raw_message_set_rssi(self, rssi_list)


    def set_snr(self, snr):
        """set_snr(raw_message self, double snr)"""
        return _raw_util.raw_message_set_snr(self, snr)


    def set_snr_list(self, snr_list):
        """set_snr_list(raw_message self, pmt_vector_double snr_list)"""
        return _raw_util.raw_message_set_snr_list(self, snr_list)


    def set_power_list(self, power_list):
        """set_power_list(raw_message self, pmt_vector_double power_list)"""
        return _raw_util.raw_message_set_power_list(self, power_list)


    def set_power_list2(self, power_list):
        """set_power_list2(raw_message self, pmt_vector_double power_list)"""
        return _raw_util.raw_message_set_power_list2(self, power_list)


    def set_timestamp(self, ps, pfs):
        """set_timestamp(raw_message self, uint64_t ps, double pfs)"""
        return _raw_util.raw_message_set_timestamp(self, ps, pfs)


    def set_pctime(self, ps, pfs):
        """set_pctime(raw_message self, double ps, double pfs)"""
        return _raw_util.raw_message_set_pctime(self, ps, pfs)


    def get_decode_time(self):
        """get_decode_time(raw_message self) -> double"""
        return _raw_util.raw_message_get_decode_time(self)


    def get_user_type(self):
        """get_user_type(raw_message self) -> int"""
        return _raw_util.raw_message_get_user_type(self)


    def msg(self):
        """msg(raw_message self) -> unsigned char *"""
        return _raw_util.raw_message_msg(self)


    def length(self):
        """
        length(raw_message self) -> size_t

        Return the number of elements in v.
        """
        return _raw_util.raw_message_length(self)


    def to_string(self):
        """to_string(raw_message self) -> std::string"""
        return _raw_util.raw_message_to_string(self)

raw_message_swigregister = _raw_util.raw_message_swigregister
raw_message_swigregister(raw_message)


def message_ncurrently_allocated():
    """message_ncurrently_allocated() -> long"""
    return _raw_util.message_ncurrently_allocated()
class raw_msg_queue_sptr(object):
    """Proxy of C++ boost::shared_ptr<(raw_msg_queue)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(raw_msg_queue)> self) -> raw_msg_queue_sptr
        __init__(boost::shared_ptr<(raw_msg_queue)> self, raw_msg_queue * p) -> raw_msg_queue_sptr
        """
        this = _raw_util.new_raw_msg_queue_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(raw_msg_queue_sptr self) -> raw_msg_queue *"""
        return _raw_util.raw_msg_queue_sptr___deref__(self)

    __swig_destroy__ = _raw_util.delete_raw_msg_queue_sptr
    __del__ = lambda self: None

    def delete_head_nowait(self):
        """delete_head_nowait(raw_msg_queue_sptr self) -> raw_message_sptr"""
        return _raw_util.raw_msg_queue_sptr_delete_head_nowait(self)


    def empty_p(self):
        """empty_p(raw_msg_queue_sptr self) -> bool"""
        return _raw_util.raw_msg_queue_sptr_empty_p(self)


    def full_p(self):
        """full_p(raw_msg_queue_sptr self) -> bool"""
        return _raw_util.raw_msg_queue_sptr_full_p(self)


    def count(self):
        """count(raw_msg_queue_sptr self) -> unsigned int"""
        return _raw_util.raw_msg_queue_sptr_count(self)


    def flush(self):
        """flush(raw_msg_queue_sptr self)"""
        return _raw_util.raw_msg_queue_sptr_flush(self)

raw_msg_queue_sptr_swigregister = _raw_util.raw_msg_queue_sptr_swigregister
raw_msg_queue_sptr_swigregister(raw_msg_queue_sptr)


def msg_queue2(limit=0):
    """msg_queue2(unsigned int limit=0) -> raw_msg_queue_sptr"""
    return _raw_util.msg_queue2(limit)

def raw_py_msg_queue__delete_head(q):
    """raw_py_msg_queue__delete_head(raw_msg_queue_sptr q) -> raw_message_sptr"""
    return _raw_util.raw_py_msg_queue__delete_head(q)

def raw_py_msg_queue__insert_tail(q, msg):
    """raw_py_msg_queue__insert_tail(raw_msg_queue_sptr q, raw_message_sptr msg)"""
    return _raw_util.raw_py_msg_queue__insert_tail(q, msg)

raw_msg_queue_sptr.delete_head = raw_py_msg_queue__delete_head
raw_msg_queue_sptr.insert_tail = raw_py_msg_queue__insert_tail
raw_msg_queue_sptr.handle = raw_py_msg_queue__insert_tail

class raw_peak_detector_fb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(raw_peak_detector_fb)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(raw_peak_detector_fb)> self) -> raw_peak_detector_fb_sptr
        __init__(boost::shared_ptr<(raw_peak_detector_fb)> self, raw_peak_detector_fb * p) -> raw_peak_detector_fb_sptr
        """
        this = _raw_util.new_raw_peak_detector_fb_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(raw_peak_detector_fb_sptr self) -> raw_peak_detector_fb *"""
        return _raw_util.raw_peak_detector_fb_sptr___deref__(self)

    __swig_destroy__ = _raw_util.delete_raw_peak_detector_fb_sptr
    __del__ = lambda self: None

    def history(self):
        """history(raw_peak_detector_fb_sptr self) -> unsigned int"""
        return _raw_util.raw_peak_detector_fb_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(raw_peak_detector_fb_sptr self, int which, int delay)
        declare_sample_delay(raw_peak_detector_fb_sptr self, unsigned int delay)
        """
        return _raw_util.raw_peak_detector_fb_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(raw_peak_detector_fb_sptr self, int which) -> unsigned int"""
        return _raw_util.raw_peak_detector_fb_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(raw_peak_detector_fb_sptr self) -> int"""
        return _raw_util.raw_peak_detector_fb_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(raw_peak_detector_fb_sptr self) -> double"""
        return _raw_util.raw_peak_detector_fb_sptr_relative_rate(self)


    def start(self):
        """start(raw_peak_detector_fb_sptr self) -> bool"""
        return _raw_util.raw_peak_detector_fb_sptr_start(self)


    def stop(self):
        """stop(raw_peak_detector_fb_sptr self) -> bool"""
        return _raw_util.raw_peak_detector_fb_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(raw_peak_detector_fb_sptr self, unsigned int which_input) -> uint64_t"""
        return _raw_util.raw_peak_detector_fb_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(raw_peak_detector_fb_sptr self, unsigned int which_output) -> uint64_t"""
        return _raw_util.raw_peak_detector_fb_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(raw_peak_detector_fb_sptr self) -> int"""
        return _raw_util.raw_peak_detector_fb_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(raw_peak_detector_fb_sptr self, int m)"""
        return _raw_util.raw_peak_detector_fb_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(raw_peak_detector_fb_sptr self)"""
        return _raw_util.raw_peak_detector_fb_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(raw_peak_detector_fb_sptr self) -> bool"""
        return _raw_util.raw_peak_detector_fb_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(raw_peak_detector_fb_sptr self, int m)"""
        return _raw_util.raw_peak_detector_fb_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(raw_peak_detector_fb_sptr self) -> int"""
        return _raw_util.raw_peak_detector_fb_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(raw_peak_detector_fb_sptr self, int i) -> long"""
        return _raw_util.raw_peak_detector_fb_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(raw_peak_detector_fb_sptr self, long max_output_buffer)
        set_max_output_buffer(raw_peak_detector_fb_sptr self, int port, long max_output_buffer)
        """
        return _raw_util.raw_peak_detector_fb_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(raw_peak_detector_fb_sptr self, int i) -> long"""
        return _raw_util.raw_peak_detector_fb_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(raw_peak_detector_fb_sptr self, long min_output_buffer)
        set_min_output_buffer(raw_peak_detector_fb_sptr self, int port, long min_output_buffer)
        """
        return _raw_util.raw_peak_detector_fb_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(raw_peak_detector_fb_sptr self) -> float"""
        return _raw_util.raw_peak_detector_fb_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(raw_peak_detector_fb_sptr self) -> float"""
        return _raw_util.raw_peak_detector_fb_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(raw_peak_detector_fb_sptr self) -> float"""
        return _raw_util.raw_peak_detector_fb_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(raw_peak_detector_fb_sptr self) -> float"""
        return _raw_util.raw_peak_detector_fb_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(raw_peak_detector_fb_sptr self) -> float"""
        return _raw_util.raw_peak_detector_fb_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(raw_peak_detector_fb_sptr self) -> float"""
        return _raw_util.raw_peak_detector_fb_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(raw_peak_detector_fb_sptr self, int which) -> float
        pc_input_buffers_full(raw_peak_detector_fb_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_peak_detector_fb_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(raw_peak_detector_fb_sptr self, int which) -> float
        pc_input_buffers_full_avg(raw_peak_detector_fb_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_peak_detector_fb_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(raw_peak_detector_fb_sptr self, int which) -> float
        pc_input_buffers_full_var(raw_peak_detector_fb_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_peak_detector_fb_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(raw_peak_detector_fb_sptr self, int which) -> float
        pc_output_buffers_full(raw_peak_detector_fb_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_peak_detector_fb_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(raw_peak_detector_fb_sptr self, int which) -> float
        pc_output_buffers_full_avg(raw_peak_detector_fb_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_peak_detector_fb_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(raw_peak_detector_fb_sptr self, int which) -> float
        pc_output_buffers_full_var(raw_peak_detector_fb_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_peak_detector_fb_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(raw_peak_detector_fb_sptr self) -> float"""
        return _raw_util.raw_peak_detector_fb_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(raw_peak_detector_fb_sptr self) -> float"""
        return _raw_util.raw_peak_detector_fb_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(raw_peak_detector_fb_sptr self) -> float"""
        return _raw_util.raw_peak_detector_fb_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(raw_peak_detector_fb_sptr self) -> float"""
        return _raw_util.raw_peak_detector_fb_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(raw_peak_detector_fb_sptr self) -> float"""
        return _raw_util.raw_peak_detector_fb_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(raw_peak_detector_fb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _raw_util.raw_peak_detector_fb_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(raw_peak_detector_fb_sptr self)"""
        return _raw_util.raw_peak_detector_fb_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(raw_peak_detector_fb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _raw_util.raw_peak_detector_fb_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(raw_peak_detector_fb_sptr self) -> int"""
        return _raw_util.raw_peak_detector_fb_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(raw_peak_detector_fb_sptr self) -> int"""
        return _raw_util.raw_peak_detector_fb_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(raw_peak_detector_fb_sptr self, int priority) -> int"""
        return _raw_util.raw_peak_detector_fb_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(raw_peak_detector_fb_sptr self) -> std::string"""
        return _raw_util.raw_peak_detector_fb_sptr_name(self)


    def symbol_name(self):
        """symbol_name(raw_peak_detector_fb_sptr self) -> std::string"""
        return _raw_util.raw_peak_detector_fb_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(raw_peak_detector_fb_sptr self) -> io_signature_sptr"""
        return _raw_util.raw_peak_detector_fb_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(raw_peak_detector_fb_sptr self) -> io_signature_sptr"""
        return _raw_util.raw_peak_detector_fb_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(raw_peak_detector_fb_sptr self) -> long"""
        return _raw_util.raw_peak_detector_fb_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(raw_peak_detector_fb_sptr self) -> basic_block_sptr"""
        return _raw_util.raw_peak_detector_fb_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(raw_peak_detector_fb_sptr self, int ninputs, int noutputs) -> bool"""
        return _raw_util.raw_peak_detector_fb_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(raw_peak_detector_fb_sptr self) -> std::string"""
        return _raw_util.raw_peak_detector_fb_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(raw_peak_detector_fb_sptr self, std::string name)"""
        return _raw_util.raw_peak_detector_fb_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(raw_peak_detector_fb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _raw_util.raw_peak_detector_fb_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(raw_peak_detector_fb_sptr self) -> swig_int_ptr"""
        return _raw_util.raw_peak_detector_fb_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(raw_peak_detector_fb_sptr self) -> swig_int_ptr"""
        return _raw_util.raw_peak_detector_fb_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(raw_peak_detector_fb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _raw_util.raw_peak_detector_fb_sptr_message_subscribers(self, which_port)

raw_peak_detector_fb_sptr_swigregister = _raw_util.raw_peak_detector_fb_sptr_swigregister
raw_peak_detector_fb_sptr_swigregister(raw_peak_detector_fb_sptr)


raw_peak_detector_fb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def peak_detector_fb(threshold_factor_rise=0.25, threshold_factor_fall=0.40, look_ahead=10, alpha=0.001):
    """peak_detector_fb(float threshold_factor_rise=0.25, float threshold_factor_fall=0.40, int look_ahead=10, float alpha=0.001) -> raw_peak_detector_fb_sptr"""
    return _raw_util.peak_detector_fb(threshold_factor_rise, threshold_factor_fall, look_ahead, alpha)
class raw_peak_detector2_fb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(raw_peak_detector2_fb)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(raw_peak_detector2_fb)> self) -> raw_peak_detector2_fb_sptr
        __init__(boost::shared_ptr<(raw_peak_detector2_fb)> self, raw_peak_detector2_fb * p) -> raw_peak_detector2_fb_sptr
        """
        this = _raw_util.new_raw_peak_detector2_fb_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(raw_peak_detector2_fb_sptr self) -> raw_peak_detector2_fb *"""
        return _raw_util.raw_peak_detector2_fb_sptr___deref__(self)

    __swig_destroy__ = _raw_util.delete_raw_peak_detector2_fb_sptr
    __del__ = lambda self: None

    def history(self):
        """history(raw_peak_detector2_fb_sptr self) -> unsigned int"""
        return _raw_util.raw_peak_detector2_fb_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(raw_peak_detector2_fb_sptr self, int which, int delay)
        declare_sample_delay(raw_peak_detector2_fb_sptr self, unsigned int delay)
        """
        return _raw_util.raw_peak_detector2_fb_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(raw_peak_detector2_fb_sptr self, int which) -> unsigned int"""
        return _raw_util.raw_peak_detector2_fb_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(raw_peak_detector2_fb_sptr self) -> int"""
        return _raw_util.raw_peak_detector2_fb_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(raw_peak_detector2_fb_sptr self) -> double"""
        return _raw_util.raw_peak_detector2_fb_sptr_relative_rate(self)


    def start(self):
        """start(raw_peak_detector2_fb_sptr self) -> bool"""
        return _raw_util.raw_peak_detector2_fb_sptr_start(self)


    def stop(self):
        """stop(raw_peak_detector2_fb_sptr self) -> bool"""
        return _raw_util.raw_peak_detector2_fb_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(raw_peak_detector2_fb_sptr self, unsigned int which_input) -> uint64_t"""
        return _raw_util.raw_peak_detector2_fb_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(raw_peak_detector2_fb_sptr self, unsigned int which_output) -> uint64_t"""
        return _raw_util.raw_peak_detector2_fb_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(raw_peak_detector2_fb_sptr self) -> int"""
        return _raw_util.raw_peak_detector2_fb_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(raw_peak_detector2_fb_sptr self, int m)"""
        return _raw_util.raw_peak_detector2_fb_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(raw_peak_detector2_fb_sptr self)"""
        return _raw_util.raw_peak_detector2_fb_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(raw_peak_detector2_fb_sptr self) -> bool"""
        return _raw_util.raw_peak_detector2_fb_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(raw_peak_detector2_fb_sptr self, int m)"""
        return _raw_util.raw_peak_detector2_fb_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(raw_peak_detector2_fb_sptr self) -> int"""
        return _raw_util.raw_peak_detector2_fb_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(raw_peak_detector2_fb_sptr self, int i) -> long"""
        return _raw_util.raw_peak_detector2_fb_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(raw_peak_detector2_fb_sptr self, long max_output_buffer)
        set_max_output_buffer(raw_peak_detector2_fb_sptr self, int port, long max_output_buffer)
        """
        return _raw_util.raw_peak_detector2_fb_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(raw_peak_detector2_fb_sptr self, int i) -> long"""
        return _raw_util.raw_peak_detector2_fb_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(raw_peak_detector2_fb_sptr self, long min_output_buffer)
        set_min_output_buffer(raw_peak_detector2_fb_sptr self, int port, long min_output_buffer)
        """
        return _raw_util.raw_peak_detector2_fb_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(raw_peak_detector2_fb_sptr self) -> float"""
        return _raw_util.raw_peak_detector2_fb_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(raw_peak_detector2_fb_sptr self) -> float"""
        return _raw_util.raw_peak_detector2_fb_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(raw_peak_detector2_fb_sptr self) -> float"""
        return _raw_util.raw_peak_detector2_fb_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(raw_peak_detector2_fb_sptr self) -> float"""
        return _raw_util.raw_peak_detector2_fb_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(raw_peak_detector2_fb_sptr self) -> float"""
        return _raw_util.raw_peak_detector2_fb_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(raw_peak_detector2_fb_sptr self) -> float"""
        return _raw_util.raw_peak_detector2_fb_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(raw_peak_detector2_fb_sptr self, int which) -> float
        pc_input_buffers_full(raw_peak_detector2_fb_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_peak_detector2_fb_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(raw_peak_detector2_fb_sptr self, int which) -> float
        pc_input_buffers_full_avg(raw_peak_detector2_fb_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_peak_detector2_fb_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(raw_peak_detector2_fb_sptr self, int which) -> float
        pc_input_buffers_full_var(raw_peak_detector2_fb_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_peak_detector2_fb_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(raw_peak_detector2_fb_sptr self, int which) -> float
        pc_output_buffers_full(raw_peak_detector2_fb_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_peak_detector2_fb_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(raw_peak_detector2_fb_sptr self, int which) -> float
        pc_output_buffers_full_avg(raw_peak_detector2_fb_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_peak_detector2_fb_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(raw_peak_detector2_fb_sptr self, int which) -> float
        pc_output_buffers_full_var(raw_peak_detector2_fb_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_peak_detector2_fb_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(raw_peak_detector2_fb_sptr self) -> float"""
        return _raw_util.raw_peak_detector2_fb_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(raw_peak_detector2_fb_sptr self) -> float"""
        return _raw_util.raw_peak_detector2_fb_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(raw_peak_detector2_fb_sptr self) -> float"""
        return _raw_util.raw_peak_detector2_fb_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(raw_peak_detector2_fb_sptr self) -> float"""
        return _raw_util.raw_peak_detector2_fb_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(raw_peak_detector2_fb_sptr self) -> float"""
        return _raw_util.raw_peak_detector2_fb_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(raw_peak_detector2_fb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _raw_util.raw_peak_detector2_fb_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(raw_peak_detector2_fb_sptr self)"""
        return _raw_util.raw_peak_detector2_fb_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(raw_peak_detector2_fb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _raw_util.raw_peak_detector2_fb_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(raw_peak_detector2_fb_sptr self) -> int"""
        return _raw_util.raw_peak_detector2_fb_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(raw_peak_detector2_fb_sptr self) -> int"""
        return _raw_util.raw_peak_detector2_fb_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(raw_peak_detector2_fb_sptr self, int priority) -> int"""
        return _raw_util.raw_peak_detector2_fb_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(raw_peak_detector2_fb_sptr self) -> std::string"""
        return _raw_util.raw_peak_detector2_fb_sptr_name(self)


    def symbol_name(self):
        """symbol_name(raw_peak_detector2_fb_sptr self) -> std::string"""
        return _raw_util.raw_peak_detector2_fb_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(raw_peak_detector2_fb_sptr self) -> io_signature_sptr"""
        return _raw_util.raw_peak_detector2_fb_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(raw_peak_detector2_fb_sptr self) -> io_signature_sptr"""
        return _raw_util.raw_peak_detector2_fb_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(raw_peak_detector2_fb_sptr self) -> long"""
        return _raw_util.raw_peak_detector2_fb_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(raw_peak_detector2_fb_sptr self) -> basic_block_sptr"""
        return _raw_util.raw_peak_detector2_fb_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(raw_peak_detector2_fb_sptr self, int ninputs, int noutputs) -> bool"""
        return _raw_util.raw_peak_detector2_fb_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(raw_peak_detector2_fb_sptr self) -> std::string"""
        return _raw_util.raw_peak_detector2_fb_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(raw_peak_detector2_fb_sptr self, std::string name)"""
        return _raw_util.raw_peak_detector2_fb_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(raw_peak_detector2_fb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _raw_util.raw_peak_detector2_fb_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(raw_peak_detector2_fb_sptr self) -> swig_int_ptr"""
        return _raw_util.raw_peak_detector2_fb_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(raw_peak_detector2_fb_sptr self) -> swig_int_ptr"""
        return _raw_util.raw_peak_detector2_fb_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(raw_peak_detector2_fb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _raw_util.raw_peak_detector2_fb_sptr_message_subscribers(self, which_port)

raw_peak_detector2_fb_sptr_swigregister = _raw_util.raw_peak_detector2_fb_sptr_swigregister
raw_peak_detector2_fb_sptr_swigregister(raw_peak_detector2_fb_sptr)


raw_peak_detector2_fb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def peak_detector2_fb(threshold=0.7):
    """peak_detector2_fb(float threshold=0.7) -> raw_peak_detector2_fb_sptr"""
    return _raw_util.peak_detector2_fb(threshold)
class raw_message_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(raw_message_sink)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(raw_message_sink)> self) -> raw_message_sink_sptr
        __init__(boost::shared_ptr<(raw_message_sink)> self, raw_message_sink * p) -> raw_message_sink_sptr
        """
        this = _raw_util.new_raw_message_sink_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(raw_message_sink_sptr self) -> raw_message_sink *"""
        return _raw_util.raw_message_sink_sptr___deref__(self)

    __swig_destroy__ = _raw_util.delete_raw_message_sink_sptr
    __del__ = lambda self: None

    def history(self):
        """history(raw_message_sink_sptr self) -> unsigned int"""
        return _raw_util.raw_message_sink_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(raw_message_sink_sptr self, int which, int delay)
        declare_sample_delay(raw_message_sink_sptr self, unsigned int delay)
        """
        return _raw_util.raw_message_sink_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(raw_message_sink_sptr self, int which) -> unsigned int"""
        return _raw_util.raw_message_sink_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(raw_message_sink_sptr self) -> int"""
        return _raw_util.raw_message_sink_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(raw_message_sink_sptr self) -> double"""
        return _raw_util.raw_message_sink_sptr_relative_rate(self)


    def start(self):
        """start(raw_message_sink_sptr self) -> bool"""
        return _raw_util.raw_message_sink_sptr_start(self)


    def stop(self):
        """stop(raw_message_sink_sptr self) -> bool"""
        return _raw_util.raw_message_sink_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(raw_message_sink_sptr self, unsigned int which_input) -> uint64_t"""
        return _raw_util.raw_message_sink_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(raw_message_sink_sptr self, unsigned int which_output) -> uint64_t"""
        return _raw_util.raw_message_sink_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(raw_message_sink_sptr self) -> int"""
        return _raw_util.raw_message_sink_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(raw_message_sink_sptr self, int m)"""
        return _raw_util.raw_message_sink_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(raw_message_sink_sptr self)"""
        return _raw_util.raw_message_sink_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(raw_message_sink_sptr self) -> bool"""
        return _raw_util.raw_message_sink_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(raw_message_sink_sptr self, int m)"""
        return _raw_util.raw_message_sink_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(raw_message_sink_sptr self) -> int"""
        return _raw_util.raw_message_sink_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(raw_message_sink_sptr self, int i) -> long"""
        return _raw_util.raw_message_sink_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(raw_message_sink_sptr self, long max_output_buffer)
        set_max_output_buffer(raw_message_sink_sptr self, int port, long max_output_buffer)
        """
        return _raw_util.raw_message_sink_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(raw_message_sink_sptr self, int i) -> long"""
        return _raw_util.raw_message_sink_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(raw_message_sink_sptr self, long min_output_buffer)
        set_min_output_buffer(raw_message_sink_sptr self, int port, long min_output_buffer)
        """
        return _raw_util.raw_message_sink_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(raw_message_sink_sptr self) -> float"""
        return _raw_util.raw_message_sink_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(raw_message_sink_sptr self) -> float"""
        return _raw_util.raw_message_sink_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(raw_message_sink_sptr self) -> float"""
        return _raw_util.raw_message_sink_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(raw_message_sink_sptr self) -> float"""
        return _raw_util.raw_message_sink_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(raw_message_sink_sptr self) -> float"""
        return _raw_util.raw_message_sink_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(raw_message_sink_sptr self) -> float"""
        return _raw_util.raw_message_sink_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(raw_message_sink_sptr self, int which) -> float
        pc_input_buffers_full(raw_message_sink_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_message_sink_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(raw_message_sink_sptr self, int which) -> float
        pc_input_buffers_full_avg(raw_message_sink_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_message_sink_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(raw_message_sink_sptr self, int which) -> float
        pc_input_buffers_full_var(raw_message_sink_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_message_sink_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(raw_message_sink_sptr self, int which) -> float
        pc_output_buffers_full(raw_message_sink_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_message_sink_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(raw_message_sink_sptr self, int which) -> float
        pc_output_buffers_full_avg(raw_message_sink_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_message_sink_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(raw_message_sink_sptr self, int which) -> float
        pc_output_buffers_full_var(raw_message_sink_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_message_sink_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(raw_message_sink_sptr self) -> float"""
        return _raw_util.raw_message_sink_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(raw_message_sink_sptr self) -> float"""
        return _raw_util.raw_message_sink_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(raw_message_sink_sptr self) -> float"""
        return _raw_util.raw_message_sink_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(raw_message_sink_sptr self) -> float"""
        return _raw_util.raw_message_sink_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(raw_message_sink_sptr self) -> float"""
        return _raw_util.raw_message_sink_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(raw_message_sink_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _raw_util.raw_message_sink_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(raw_message_sink_sptr self)"""
        return _raw_util.raw_message_sink_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(raw_message_sink_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _raw_util.raw_message_sink_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(raw_message_sink_sptr self) -> int"""
        return _raw_util.raw_message_sink_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(raw_message_sink_sptr self) -> int"""
        return _raw_util.raw_message_sink_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(raw_message_sink_sptr self, int priority) -> int"""
        return _raw_util.raw_message_sink_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(raw_message_sink_sptr self) -> std::string"""
        return _raw_util.raw_message_sink_sptr_name(self)


    def symbol_name(self):
        """symbol_name(raw_message_sink_sptr self) -> std::string"""
        return _raw_util.raw_message_sink_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(raw_message_sink_sptr self) -> io_signature_sptr"""
        return _raw_util.raw_message_sink_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(raw_message_sink_sptr self) -> io_signature_sptr"""
        return _raw_util.raw_message_sink_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(raw_message_sink_sptr self) -> long"""
        return _raw_util.raw_message_sink_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(raw_message_sink_sptr self) -> basic_block_sptr"""
        return _raw_util.raw_message_sink_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(raw_message_sink_sptr self, int ninputs, int noutputs) -> bool"""
        return _raw_util.raw_message_sink_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(raw_message_sink_sptr self) -> std::string"""
        return _raw_util.raw_message_sink_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(raw_message_sink_sptr self, std::string name)"""
        return _raw_util.raw_message_sink_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(raw_message_sink_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _raw_util.raw_message_sink_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(raw_message_sink_sptr self) -> swig_int_ptr"""
        return _raw_util.raw_message_sink_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(raw_message_sink_sptr self) -> swig_int_ptr"""
        return _raw_util.raw_message_sink_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(raw_message_sink_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _raw_util.raw_message_sink_sptr_message_subscribers(self, which_port)

raw_message_sink_sptr_swigregister = _raw_util.raw_message_sink_sptr_swigregister
raw_message_sink_sptr_swigregister(raw_message_sink_sptr)


raw_message_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def message_sink(itemsize, num_symbol, msgq, dont_block):
    """message_sink(size_t itemsize, size_t num_symbol, raw_msg_queue_sptr msgq, bool dont_block) -> raw_message_sink_sptr"""
    return _raw_util.message_sink(itemsize, num_symbol, msgq, dont_block)
class raw_message_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(raw_message_source)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(raw_message_source)> self) -> raw_message_source_sptr
        __init__(boost::shared_ptr<(raw_message_source)> self, raw_message_source * p) -> raw_message_source_sptr
        """
        this = _raw_util.new_raw_message_source_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(raw_message_source_sptr self) -> raw_message_source *"""
        return _raw_util.raw_message_source_sptr___deref__(self)

    __swig_destroy__ = _raw_util.delete_raw_message_source_sptr
    __del__ = lambda self: None

    def msgq(self):
        """msgq(raw_message_source_sptr self) -> raw_msg_queue_sptr"""
        return _raw_util.raw_message_source_sptr_msgq(self)


    def history(self):
        """history(raw_message_source_sptr self) -> unsigned int"""
        return _raw_util.raw_message_source_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(raw_message_source_sptr self, int which, int delay)
        declare_sample_delay(raw_message_source_sptr self, unsigned int delay)
        """
        return _raw_util.raw_message_source_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(raw_message_source_sptr self, int which) -> unsigned int"""
        return _raw_util.raw_message_source_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(raw_message_source_sptr self) -> int"""
        return _raw_util.raw_message_source_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(raw_message_source_sptr self) -> double"""
        return _raw_util.raw_message_source_sptr_relative_rate(self)


    def start(self):
        """start(raw_message_source_sptr self) -> bool"""
        return _raw_util.raw_message_source_sptr_start(self)


    def stop(self):
        """stop(raw_message_source_sptr self) -> bool"""
        return _raw_util.raw_message_source_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(raw_message_source_sptr self, unsigned int which_input) -> uint64_t"""
        return _raw_util.raw_message_source_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(raw_message_source_sptr self, unsigned int which_output) -> uint64_t"""
        return _raw_util.raw_message_source_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(raw_message_source_sptr self) -> int"""
        return _raw_util.raw_message_source_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(raw_message_source_sptr self, int m)"""
        return _raw_util.raw_message_source_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(raw_message_source_sptr self)"""
        return _raw_util.raw_message_source_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(raw_message_source_sptr self) -> bool"""
        return _raw_util.raw_message_source_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(raw_message_source_sptr self, int m)"""
        return _raw_util.raw_message_source_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(raw_message_source_sptr self) -> int"""
        return _raw_util.raw_message_source_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(raw_message_source_sptr self, int i) -> long"""
        return _raw_util.raw_message_source_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(raw_message_source_sptr self, long max_output_buffer)
        set_max_output_buffer(raw_message_source_sptr self, int port, long max_output_buffer)
        """
        return _raw_util.raw_message_source_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(raw_message_source_sptr self, int i) -> long"""
        return _raw_util.raw_message_source_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(raw_message_source_sptr self, long min_output_buffer)
        set_min_output_buffer(raw_message_source_sptr self, int port, long min_output_buffer)
        """
        return _raw_util.raw_message_source_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(raw_message_source_sptr self) -> float"""
        return _raw_util.raw_message_source_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(raw_message_source_sptr self) -> float"""
        return _raw_util.raw_message_source_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(raw_message_source_sptr self) -> float"""
        return _raw_util.raw_message_source_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(raw_message_source_sptr self) -> float"""
        return _raw_util.raw_message_source_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(raw_message_source_sptr self) -> float"""
        return _raw_util.raw_message_source_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(raw_message_source_sptr self) -> float"""
        return _raw_util.raw_message_source_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(raw_message_source_sptr self, int which) -> float
        pc_input_buffers_full(raw_message_source_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_message_source_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(raw_message_source_sptr self, int which) -> float
        pc_input_buffers_full_avg(raw_message_source_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_message_source_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(raw_message_source_sptr self, int which) -> float
        pc_input_buffers_full_var(raw_message_source_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_message_source_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(raw_message_source_sptr self, int which) -> float
        pc_output_buffers_full(raw_message_source_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_message_source_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(raw_message_source_sptr self, int which) -> float
        pc_output_buffers_full_avg(raw_message_source_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_message_source_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(raw_message_source_sptr self, int which) -> float
        pc_output_buffers_full_var(raw_message_source_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_message_source_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(raw_message_source_sptr self) -> float"""
        return _raw_util.raw_message_source_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(raw_message_source_sptr self) -> float"""
        return _raw_util.raw_message_source_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(raw_message_source_sptr self) -> float"""
        return _raw_util.raw_message_source_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(raw_message_source_sptr self) -> float"""
        return _raw_util.raw_message_source_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(raw_message_source_sptr self) -> float"""
        return _raw_util.raw_message_source_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(raw_message_source_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _raw_util.raw_message_source_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(raw_message_source_sptr self)"""
        return _raw_util.raw_message_source_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(raw_message_source_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _raw_util.raw_message_source_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(raw_message_source_sptr self) -> int"""
        return _raw_util.raw_message_source_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(raw_message_source_sptr self) -> int"""
        return _raw_util.raw_message_source_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(raw_message_source_sptr self, int priority) -> int"""
        return _raw_util.raw_message_source_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(raw_message_source_sptr self) -> std::string"""
        return _raw_util.raw_message_source_sptr_name(self)


    def symbol_name(self):
        """symbol_name(raw_message_source_sptr self) -> std::string"""
        return _raw_util.raw_message_source_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(raw_message_source_sptr self) -> io_signature_sptr"""
        return _raw_util.raw_message_source_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(raw_message_source_sptr self) -> io_signature_sptr"""
        return _raw_util.raw_message_source_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(raw_message_source_sptr self) -> long"""
        return _raw_util.raw_message_source_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(raw_message_source_sptr self) -> basic_block_sptr"""
        return _raw_util.raw_message_source_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(raw_message_source_sptr self, int ninputs, int noutputs) -> bool"""
        return _raw_util.raw_message_source_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(raw_message_source_sptr self) -> std::string"""
        return _raw_util.raw_message_source_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(raw_message_source_sptr self, std::string name)"""
        return _raw_util.raw_message_source_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(raw_message_source_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _raw_util.raw_message_source_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(raw_message_source_sptr self) -> swig_int_ptr"""
        return _raw_util.raw_message_source_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(raw_message_source_sptr self) -> swig_int_ptr"""
        return _raw_util.raw_message_source_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(raw_message_source_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _raw_util.raw_message_source_sptr_message_subscribers(self, which_port)

raw_message_source_sptr_swigregister = _raw_util.raw_message_source_sptr_swigregister
raw_message_source_sptr_swigregister(raw_message_source_sptr)


raw_message_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def message_source(*args):
    """
    message_source(size_t itemsize, int msgq_limit=0, bool flag=False) -> raw_message_source_sptr
    message_source(size_t itemsize, raw_msg_queue_sptr msgq) -> raw_message_source_sptr
    """
    return _raw_util.message_source(*args)
class raw_regenerate_peak2_sptr(object):
    """Proxy of C++ boost::shared_ptr<(raw_regenerate_peak2)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(raw_regenerate_peak2)> self) -> raw_regenerate_peak2_sptr
        __init__(boost::shared_ptr<(raw_regenerate_peak2)> self, raw_regenerate_peak2 * p) -> raw_regenerate_peak2_sptr
        """
        this = _raw_util.new_raw_regenerate_peak2_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(raw_regenerate_peak2_sptr self) -> raw_regenerate_peak2 *"""
        return _raw_util.raw_regenerate_peak2_sptr___deref__(self)

    __swig_destroy__ = _raw_util.delete_raw_regenerate_peak2_sptr
    __del__ = lambda self: None

    def set_file_mode(self, mode):
        """set_file_mode(raw_regenerate_peak2_sptr self, int mode)"""
        return _raw_util.raw_regenerate_peak2_sptr_set_file_mode(self, mode)


    def history(self):
        """history(raw_regenerate_peak2_sptr self) -> unsigned int"""
        return _raw_util.raw_regenerate_peak2_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(raw_regenerate_peak2_sptr self, int which, int delay)
        declare_sample_delay(raw_regenerate_peak2_sptr self, unsigned int delay)
        """
        return _raw_util.raw_regenerate_peak2_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(raw_regenerate_peak2_sptr self, int which) -> unsigned int"""
        return _raw_util.raw_regenerate_peak2_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(raw_regenerate_peak2_sptr self) -> int"""
        return _raw_util.raw_regenerate_peak2_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(raw_regenerate_peak2_sptr self) -> double"""
        return _raw_util.raw_regenerate_peak2_sptr_relative_rate(self)


    def start(self):
        """start(raw_regenerate_peak2_sptr self) -> bool"""
        return _raw_util.raw_regenerate_peak2_sptr_start(self)


    def stop(self):
        """stop(raw_regenerate_peak2_sptr self) -> bool"""
        return _raw_util.raw_regenerate_peak2_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(raw_regenerate_peak2_sptr self, unsigned int which_input) -> uint64_t"""
        return _raw_util.raw_regenerate_peak2_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(raw_regenerate_peak2_sptr self, unsigned int which_output) -> uint64_t"""
        return _raw_util.raw_regenerate_peak2_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(raw_regenerate_peak2_sptr self) -> int"""
        return _raw_util.raw_regenerate_peak2_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(raw_regenerate_peak2_sptr self, int m)"""
        return _raw_util.raw_regenerate_peak2_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(raw_regenerate_peak2_sptr self)"""
        return _raw_util.raw_regenerate_peak2_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(raw_regenerate_peak2_sptr self) -> bool"""
        return _raw_util.raw_regenerate_peak2_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(raw_regenerate_peak2_sptr self, int m)"""
        return _raw_util.raw_regenerate_peak2_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(raw_regenerate_peak2_sptr self) -> int"""
        return _raw_util.raw_regenerate_peak2_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(raw_regenerate_peak2_sptr self, int i) -> long"""
        return _raw_util.raw_regenerate_peak2_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(raw_regenerate_peak2_sptr self, long max_output_buffer)
        set_max_output_buffer(raw_regenerate_peak2_sptr self, int port, long max_output_buffer)
        """
        return _raw_util.raw_regenerate_peak2_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(raw_regenerate_peak2_sptr self, int i) -> long"""
        return _raw_util.raw_regenerate_peak2_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(raw_regenerate_peak2_sptr self, long min_output_buffer)
        set_min_output_buffer(raw_regenerate_peak2_sptr self, int port, long min_output_buffer)
        """
        return _raw_util.raw_regenerate_peak2_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(raw_regenerate_peak2_sptr self) -> float"""
        return _raw_util.raw_regenerate_peak2_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(raw_regenerate_peak2_sptr self) -> float"""
        return _raw_util.raw_regenerate_peak2_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(raw_regenerate_peak2_sptr self) -> float"""
        return _raw_util.raw_regenerate_peak2_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(raw_regenerate_peak2_sptr self) -> float"""
        return _raw_util.raw_regenerate_peak2_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(raw_regenerate_peak2_sptr self) -> float"""
        return _raw_util.raw_regenerate_peak2_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(raw_regenerate_peak2_sptr self) -> float"""
        return _raw_util.raw_regenerate_peak2_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(raw_regenerate_peak2_sptr self, int which) -> float
        pc_input_buffers_full(raw_regenerate_peak2_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_regenerate_peak2_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(raw_regenerate_peak2_sptr self, int which) -> float
        pc_input_buffers_full_avg(raw_regenerate_peak2_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_regenerate_peak2_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(raw_regenerate_peak2_sptr self, int which) -> float
        pc_input_buffers_full_var(raw_regenerate_peak2_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_regenerate_peak2_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(raw_regenerate_peak2_sptr self, int which) -> float
        pc_output_buffers_full(raw_regenerate_peak2_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_regenerate_peak2_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(raw_regenerate_peak2_sptr self, int which) -> float
        pc_output_buffers_full_avg(raw_regenerate_peak2_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_regenerate_peak2_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(raw_regenerate_peak2_sptr self, int which) -> float
        pc_output_buffers_full_var(raw_regenerate_peak2_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_regenerate_peak2_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(raw_regenerate_peak2_sptr self) -> float"""
        return _raw_util.raw_regenerate_peak2_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(raw_regenerate_peak2_sptr self) -> float"""
        return _raw_util.raw_regenerate_peak2_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(raw_regenerate_peak2_sptr self) -> float"""
        return _raw_util.raw_regenerate_peak2_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(raw_regenerate_peak2_sptr self) -> float"""
        return _raw_util.raw_regenerate_peak2_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(raw_regenerate_peak2_sptr self) -> float"""
        return _raw_util.raw_regenerate_peak2_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(raw_regenerate_peak2_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _raw_util.raw_regenerate_peak2_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(raw_regenerate_peak2_sptr self)"""
        return _raw_util.raw_regenerate_peak2_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(raw_regenerate_peak2_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _raw_util.raw_regenerate_peak2_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(raw_regenerate_peak2_sptr self) -> int"""
        return _raw_util.raw_regenerate_peak2_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(raw_regenerate_peak2_sptr self) -> int"""
        return _raw_util.raw_regenerate_peak2_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(raw_regenerate_peak2_sptr self, int priority) -> int"""
        return _raw_util.raw_regenerate_peak2_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(raw_regenerate_peak2_sptr self) -> std::string"""
        return _raw_util.raw_regenerate_peak2_sptr_name(self)


    def symbol_name(self):
        """symbol_name(raw_regenerate_peak2_sptr self) -> std::string"""
        return _raw_util.raw_regenerate_peak2_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(raw_regenerate_peak2_sptr self) -> io_signature_sptr"""
        return _raw_util.raw_regenerate_peak2_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(raw_regenerate_peak2_sptr self) -> io_signature_sptr"""
        return _raw_util.raw_regenerate_peak2_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(raw_regenerate_peak2_sptr self) -> long"""
        return _raw_util.raw_regenerate_peak2_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(raw_regenerate_peak2_sptr self) -> basic_block_sptr"""
        return _raw_util.raw_regenerate_peak2_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(raw_regenerate_peak2_sptr self, int ninputs, int noutputs) -> bool"""
        return _raw_util.raw_regenerate_peak2_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(raw_regenerate_peak2_sptr self) -> std::string"""
        return _raw_util.raw_regenerate_peak2_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(raw_regenerate_peak2_sptr self, std::string name)"""
        return _raw_util.raw_regenerate_peak2_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(raw_regenerate_peak2_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _raw_util.raw_regenerate_peak2_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(raw_regenerate_peak2_sptr self) -> swig_int_ptr"""
        return _raw_util.raw_regenerate_peak2_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(raw_regenerate_peak2_sptr self) -> swig_int_ptr"""
        return _raw_util.raw_regenerate_peak2_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(raw_regenerate_peak2_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _raw_util.raw_regenerate_peak2_sptr_message_subscribers(self, which_port)

raw_regenerate_peak2_sptr_swigregister = _raw_util.raw_regenerate_peak2_sptr_swigregister
raw_regenerate_peak2_sptr_swigregister(raw_regenerate_peak2_sptr)


raw_regenerate_peak2_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def regenerate_peak2(fft_length, symbol_length, cplen, preamble, debug=False):
    """regenerate_peak2(unsigned int fft_length, unsigned int symbol_length, unsigned int cplen, gr_vector_vector_complexf preamble, bool debug=False) -> raw_regenerate_peak2_sptr"""
    return _raw_util.regenerate_peak2(fft_length, symbol_length, cplen, preamble, debug)
class raw_regenerate_peak3_sptr(object):
    """Proxy of C++ boost::shared_ptr<(raw_regenerate_peak3)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(raw_regenerate_peak3)> self) -> raw_regenerate_peak3_sptr
        __init__(boost::shared_ptr<(raw_regenerate_peak3)> self, raw_regenerate_peak3 * p) -> raw_regenerate_peak3_sptr
        """
        this = _raw_util.new_raw_regenerate_peak3_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(raw_regenerate_peak3_sptr self) -> raw_regenerate_peak3 *"""
        return _raw_util.raw_regenerate_peak3_sptr___deref__(self)

    __swig_destroy__ = _raw_util.delete_raw_regenerate_peak3_sptr
    __del__ = lambda self: None

    def history(self):
        """history(raw_regenerate_peak3_sptr self) -> unsigned int"""
        return _raw_util.raw_regenerate_peak3_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(raw_regenerate_peak3_sptr self, int which, int delay)
        declare_sample_delay(raw_regenerate_peak3_sptr self, unsigned int delay)
        """
        return _raw_util.raw_regenerate_peak3_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(raw_regenerate_peak3_sptr self, int which) -> unsigned int"""
        return _raw_util.raw_regenerate_peak3_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(raw_regenerate_peak3_sptr self) -> int"""
        return _raw_util.raw_regenerate_peak3_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(raw_regenerate_peak3_sptr self) -> double"""
        return _raw_util.raw_regenerate_peak3_sptr_relative_rate(self)


    def start(self):
        """start(raw_regenerate_peak3_sptr self) -> bool"""
        return _raw_util.raw_regenerate_peak3_sptr_start(self)


    def stop(self):
        """stop(raw_regenerate_peak3_sptr self) -> bool"""
        return _raw_util.raw_regenerate_peak3_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(raw_regenerate_peak3_sptr self, unsigned int which_input) -> uint64_t"""
        return _raw_util.raw_regenerate_peak3_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(raw_regenerate_peak3_sptr self, unsigned int which_output) -> uint64_t"""
        return _raw_util.raw_regenerate_peak3_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(raw_regenerate_peak3_sptr self) -> int"""
        return _raw_util.raw_regenerate_peak3_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(raw_regenerate_peak3_sptr self, int m)"""
        return _raw_util.raw_regenerate_peak3_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(raw_regenerate_peak3_sptr self)"""
        return _raw_util.raw_regenerate_peak3_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(raw_regenerate_peak3_sptr self) -> bool"""
        return _raw_util.raw_regenerate_peak3_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(raw_regenerate_peak3_sptr self, int m)"""
        return _raw_util.raw_regenerate_peak3_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(raw_regenerate_peak3_sptr self) -> int"""
        return _raw_util.raw_regenerate_peak3_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(raw_regenerate_peak3_sptr self, int i) -> long"""
        return _raw_util.raw_regenerate_peak3_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(raw_regenerate_peak3_sptr self, long max_output_buffer)
        set_max_output_buffer(raw_regenerate_peak3_sptr self, int port, long max_output_buffer)
        """
        return _raw_util.raw_regenerate_peak3_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(raw_regenerate_peak3_sptr self, int i) -> long"""
        return _raw_util.raw_regenerate_peak3_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(raw_regenerate_peak3_sptr self, long min_output_buffer)
        set_min_output_buffer(raw_regenerate_peak3_sptr self, int port, long min_output_buffer)
        """
        return _raw_util.raw_regenerate_peak3_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(raw_regenerate_peak3_sptr self) -> float"""
        return _raw_util.raw_regenerate_peak3_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(raw_regenerate_peak3_sptr self) -> float"""
        return _raw_util.raw_regenerate_peak3_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(raw_regenerate_peak3_sptr self) -> float"""
        return _raw_util.raw_regenerate_peak3_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(raw_regenerate_peak3_sptr self) -> float"""
        return _raw_util.raw_regenerate_peak3_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(raw_regenerate_peak3_sptr self) -> float"""
        return _raw_util.raw_regenerate_peak3_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(raw_regenerate_peak3_sptr self) -> float"""
        return _raw_util.raw_regenerate_peak3_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(raw_regenerate_peak3_sptr self, int which) -> float
        pc_input_buffers_full(raw_regenerate_peak3_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_regenerate_peak3_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(raw_regenerate_peak3_sptr self, int which) -> float
        pc_input_buffers_full_avg(raw_regenerate_peak3_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_regenerate_peak3_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(raw_regenerate_peak3_sptr self, int which) -> float
        pc_input_buffers_full_var(raw_regenerate_peak3_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_regenerate_peak3_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(raw_regenerate_peak3_sptr self, int which) -> float
        pc_output_buffers_full(raw_regenerate_peak3_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_regenerate_peak3_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(raw_regenerate_peak3_sptr self, int which) -> float
        pc_output_buffers_full_avg(raw_regenerate_peak3_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_regenerate_peak3_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(raw_regenerate_peak3_sptr self, int which) -> float
        pc_output_buffers_full_var(raw_regenerate_peak3_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_regenerate_peak3_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(raw_regenerate_peak3_sptr self) -> float"""
        return _raw_util.raw_regenerate_peak3_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(raw_regenerate_peak3_sptr self) -> float"""
        return _raw_util.raw_regenerate_peak3_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(raw_regenerate_peak3_sptr self) -> float"""
        return _raw_util.raw_regenerate_peak3_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(raw_regenerate_peak3_sptr self) -> float"""
        return _raw_util.raw_regenerate_peak3_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(raw_regenerate_peak3_sptr self) -> float"""
        return _raw_util.raw_regenerate_peak3_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(raw_regenerate_peak3_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _raw_util.raw_regenerate_peak3_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(raw_regenerate_peak3_sptr self)"""
        return _raw_util.raw_regenerate_peak3_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(raw_regenerate_peak3_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _raw_util.raw_regenerate_peak3_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(raw_regenerate_peak3_sptr self) -> int"""
        return _raw_util.raw_regenerate_peak3_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(raw_regenerate_peak3_sptr self) -> int"""
        return _raw_util.raw_regenerate_peak3_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(raw_regenerate_peak3_sptr self, int priority) -> int"""
        return _raw_util.raw_regenerate_peak3_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(raw_regenerate_peak3_sptr self) -> std::string"""
        return _raw_util.raw_regenerate_peak3_sptr_name(self)


    def symbol_name(self):
        """symbol_name(raw_regenerate_peak3_sptr self) -> std::string"""
        return _raw_util.raw_regenerate_peak3_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(raw_regenerate_peak3_sptr self) -> io_signature_sptr"""
        return _raw_util.raw_regenerate_peak3_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(raw_regenerate_peak3_sptr self) -> io_signature_sptr"""
        return _raw_util.raw_regenerate_peak3_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(raw_regenerate_peak3_sptr self) -> long"""
        return _raw_util.raw_regenerate_peak3_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(raw_regenerate_peak3_sptr self) -> basic_block_sptr"""
        return _raw_util.raw_regenerate_peak3_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(raw_regenerate_peak3_sptr self, int ninputs, int noutputs) -> bool"""
        return _raw_util.raw_regenerate_peak3_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(raw_regenerate_peak3_sptr self) -> std::string"""
        return _raw_util.raw_regenerate_peak3_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(raw_regenerate_peak3_sptr self, std::string name)"""
        return _raw_util.raw_regenerate_peak3_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(raw_regenerate_peak3_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _raw_util.raw_regenerate_peak3_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(raw_regenerate_peak3_sptr self) -> swig_int_ptr"""
        return _raw_util.raw_regenerate_peak3_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(raw_regenerate_peak3_sptr self) -> swig_int_ptr"""
        return _raw_util.raw_regenerate_peak3_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(raw_regenerate_peak3_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _raw_util.raw_regenerate_peak3_sptr_message_subscribers(self, which_port)

raw_regenerate_peak3_sptr_swigregister = _raw_util.raw_regenerate_peak3_sptr_swigregister
raw_regenerate_peak3_sptr_swigregister(raw_regenerate_peak3_sptr)


raw_regenerate_peak3_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def regenerate_peak3(fft_length, symbol_length, delay, peak_delay, preamble, debug=False):
    """regenerate_peak3(unsigned int fft_length, unsigned int symbol_length, unsigned int delay, unsigned int peak_delay, gr_vector_vector_complexf preamble, bool debug=False) -> raw_regenerate_peak3_sptr"""
    return _raw_util.regenerate_peak3(fft_length, symbol_length, delay, peak_delay, preamble, debug)
class raw_pnc_frequency_modulator_fc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(raw_pnc_frequency_modulator_fc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(raw_pnc_frequency_modulator_fc)> self) -> raw_pnc_frequency_modulator_fc_sptr
        __init__(boost::shared_ptr<(raw_pnc_frequency_modulator_fc)> self, raw_pnc_frequency_modulator_fc * p) -> raw_pnc_frequency_modulator_fc_sptr
        """
        this = _raw_util.new_raw_pnc_frequency_modulator_fc_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(raw_pnc_frequency_modulator_fc_sptr self) -> raw_pnc_frequency_modulator_fc *"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr___deref__(self)

    __swig_destroy__ = _raw_util.delete_raw_pnc_frequency_modulator_fc_sptr
    __del__ = lambda self: None

    def set_sensitivity(self, sens):
        """set_sensitivity(raw_pnc_frequency_modulator_fc_sptr self, float sens)"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_set_sensitivity(self, sens)


    def sensitivity(self):
        """sensitivity(raw_pnc_frequency_modulator_fc_sptr self) -> float"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_sensitivity(self)


    def set_value(self, value):
        """set_value(raw_pnc_frequency_modulator_fc_sptr self, float value)"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_set_value(self, value)


    def value(self):
        """value(raw_pnc_frequency_modulator_fc_sptr self) -> float"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_value(self)


    def history(self):
        """history(raw_pnc_frequency_modulator_fc_sptr self) -> unsigned int"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(raw_pnc_frequency_modulator_fc_sptr self, int which, int delay)
        declare_sample_delay(raw_pnc_frequency_modulator_fc_sptr self, unsigned int delay)
        """
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(raw_pnc_frequency_modulator_fc_sptr self, int which) -> unsigned int"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(raw_pnc_frequency_modulator_fc_sptr self) -> int"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(raw_pnc_frequency_modulator_fc_sptr self) -> double"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_relative_rate(self)


    def start(self):
        """start(raw_pnc_frequency_modulator_fc_sptr self) -> bool"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_start(self)


    def stop(self):
        """stop(raw_pnc_frequency_modulator_fc_sptr self) -> bool"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(raw_pnc_frequency_modulator_fc_sptr self, unsigned int which_input) -> uint64_t"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(raw_pnc_frequency_modulator_fc_sptr self, unsigned int which_output) -> uint64_t"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(raw_pnc_frequency_modulator_fc_sptr self) -> int"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(raw_pnc_frequency_modulator_fc_sptr self, int m)"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(raw_pnc_frequency_modulator_fc_sptr self)"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(raw_pnc_frequency_modulator_fc_sptr self) -> bool"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(raw_pnc_frequency_modulator_fc_sptr self, int m)"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(raw_pnc_frequency_modulator_fc_sptr self) -> int"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(raw_pnc_frequency_modulator_fc_sptr self, int i) -> long"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(raw_pnc_frequency_modulator_fc_sptr self, long max_output_buffer)
        set_max_output_buffer(raw_pnc_frequency_modulator_fc_sptr self, int port, long max_output_buffer)
        """
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(raw_pnc_frequency_modulator_fc_sptr self, int i) -> long"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(raw_pnc_frequency_modulator_fc_sptr self, long min_output_buffer)
        set_min_output_buffer(raw_pnc_frequency_modulator_fc_sptr self, int port, long min_output_buffer)
        """
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(raw_pnc_frequency_modulator_fc_sptr self) -> float"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(raw_pnc_frequency_modulator_fc_sptr self) -> float"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(raw_pnc_frequency_modulator_fc_sptr self) -> float"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(raw_pnc_frequency_modulator_fc_sptr self) -> float"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(raw_pnc_frequency_modulator_fc_sptr self) -> float"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(raw_pnc_frequency_modulator_fc_sptr self) -> float"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(raw_pnc_frequency_modulator_fc_sptr self, int which) -> float
        pc_input_buffers_full(raw_pnc_frequency_modulator_fc_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(raw_pnc_frequency_modulator_fc_sptr self, int which) -> float
        pc_input_buffers_full_avg(raw_pnc_frequency_modulator_fc_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(raw_pnc_frequency_modulator_fc_sptr self, int which) -> float
        pc_input_buffers_full_var(raw_pnc_frequency_modulator_fc_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(raw_pnc_frequency_modulator_fc_sptr self, int which) -> float
        pc_output_buffers_full(raw_pnc_frequency_modulator_fc_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(raw_pnc_frequency_modulator_fc_sptr self, int which) -> float
        pc_output_buffers_full_avg(raw_pnc_frequency_modulator_fc_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(raw_pnc_frequency_modulator_fc_sptr self, int which) -> float
        pc_output_buffers_full_var(raw_pnc_frequency_modulator_fc_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(raw_pnc_frequency_modulator_fc_sptr self) -> float"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(raw_pnc_frequency_modulator_fc_sptr self) -> float"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(raw_pnc_frequency_modulator_fc_sptr self) -> float"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(raw_pnc_frequency_modulator_fc_sptr self) -> float"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(raw_pnc_frequency_modulator_fc_sptr self) -> float"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(raw_pnc_frequency_modulator_fc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(raw_pnc_frequency_modulator_fc_sptr self)"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(raw_pnc_frequency_modulator_fc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(raw_pnc_frequency_modulator_fc_sptr self) -> int"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(raw_pnc_frequency_modulator_fc_sptr self) -> int"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(raw_pnc_frequency_modulator_fc_sptr self, int priority) -> int"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(raw_pnc_frequency_modulator_fc_sptr self) -> std::string"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(raw_pnc_frequency_modulator_fc_sptr self) -> std::string"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(raw_pnc_frequency_modulator_fc_sptr self) -> io_signature_sptr"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(raw_pnc_frequency_modulator_fc_sptr self) -> io_signature_sptr"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(raw_pnc_frequency_modulator_fc_sptr self) -> long"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(raw_pnc_frequency_modulator_fc_sptr self) -> basic_block_sptr"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(raw_pnc_frequency_modulator_fc_sptr self, int ninputs, int noutputs) -> bool"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(raw_pnc_frequency_modulator_fc_sptr self) -> std::string"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(raw_pnc_frequency_modulator_fc_sptr self, std::string name)"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(raw_pnc_frequency_modulator_fc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(raw_pnc_frequency_modulator_fc_sptr self) -> swig_int_ptr"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(raw_pnc_frequency_modulator_fc_sptr self) -> swig_int_ptr"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(raw_pnc_frequency_modulator_fc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _raw_util.raw_pnc_frequency_modulator_fc_sptr_message_subscribers(self, which_port)

raw_pnc_frequency_modulator_fc_sptr_swigregister = _raw_util.raw_pnc_frequency_modulator_fc_sptr_swigregister
raw_pnc_frequency_modulator_fc_sptr_swigregister(raw_pnc_frequency_modulator_fc_sptr)


raw_pnc_frequency_modulator_fc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def pnc_frequency_modulator_fc(sensitivity):
    """pnc_frequency_modulator_fc(double sensitivity) -> raw_pnc_frequency_modulator_fc_sptr"""
    return _raw_util.pnc_frequency_modulator_fc(sensitivity)
class raw_divide_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(raw_divide_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(raw_divide_ff)> self) -> raw_divide_ff_sptr
        __init__(boost::shared_ptr<(raw_divide_ff)> self, raw_divide_ff * p) -> raw_divide_ff_sptr
        """
        this = _raw_util.new_raw_divide_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(raw_divide_ff_sptr self) -> raw_divide_ff *"""
        return _raw_util.raw_divide_ff_sptr___deref__(self)

    __swig_destroy__ = _raw_util.delete_raw_divide_ff_sptr
    __del__ = lambda self: None

    def history(self):
        """history(raw_divide_ff_sptr self) -> unsigned int"""
        return _raw_util.raw_divide_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(raw_divide_ff_sptr self, int which, int delay)
        declare_sample_delay(raw_divide_ff_sptr self, unsigned int delay)
        """
        return _raw_util.raw_divide_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(raw_divide_ff_sptr self, int which) -> unsigned int"""
        return _raw_util.raw_divide_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(raw_divide_ff_sptr self) -> int"""
        return _raw_util.raw_divide_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(raw_divide_ff_sptr self) -> double"""
        return _raw_util.raw_divide_ff_sptr_relative_rate(self)


    def start(self):
        """start(raw_divide_ff_sptr self) -> bool"""
        return _raw_util.raw_divide_ff_sptr_start(self)


    def stop(self):
        """stop(raw_divide_ff_sptr self) -> bool"""
        return _raw_util.raw_divide_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(raw_divide_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _raw_util.raw_divide_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(raw_divide_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _raw_util.raw_divide_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(raw_divide_ff_sptr self) -> int"""
        return _raw_util.raw_divide_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(raw_divide_ff_sptr self, int m)"""
        return _raw_util.raw_divide_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(raw_divide_ff_sptr self)"""
        return _raw_util.raw_divide_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(raw_divide_ff_sptr self) -> bool"""
        return _raw_util.raw_divide_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(raw_divide_ff_sptr self, int m)"""
        return _raw_util.raw_divide_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(raw_divide_ff_sptr self) -> int"""
        return _raw_util.raw_divide_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(raw_divide_ff_sptr self, int i) -> long"""
        return _raw_util.raw_divide_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(raw_divide_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(raw_divide_ff_sptr self, int port, long max_output_buffer)
        """
        return _raw_util.raw_divide_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(raw_divide_ff_sptr self, int i) -> long"""
        return _raw_util.raw_divide_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(raw_divide_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(raw_divide_ff_sptr self, int port, long min_output_buffer)
        """
        return _raw_util.raw_divide_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(raw_divide_ff_sptr self) -> float"""
        return _raw_util.raw_divide_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(raw_divide_ff_sptr self) -> float"""
        return _raw_util.raw_divide_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(raw_divide_ff_sptr self) -> float"""
        return _raw_util.raw_divide_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(raw_divide_ff_sptr self) -> float"""
        return _raw_util.raw_divide_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(raw_divide_ff_sptr self) -> float"""
        return _raw_util.raw_divide_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(raw_divide_ff_sptr self) -> float"""
        return _raw_util.raw_divide_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(raw_divide_ff_sptr self, int which) -> float
        pc_input_buffers_full(raw_divide_ff_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_divide_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(raw_divide_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(raw_divide_ff_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_divide_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(raw_divide_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(raw_divide_ff_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_divide_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(raw_divide_ff_sptr self, int which) -> float
        pc_output_buffers_full(raw_divide_ff_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_divide_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(raw_divide_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(raw_divide_ff_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_divide_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(raw_divide_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(raw_divide_ff_sptr self) -> pmt_vector_float
        """
        return _raw_util.raw_divide_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(raw_divide_ff_sptr self) -> float"""
        return _raw_util.raw_divide_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(raw_divide_ff_sptr self) -> float"""
        return _raw_util.raw_divide_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(raw_divide_ff_sptr self) -> float"""
        return _raw_util.raw_divide_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(raw_divide_ff_sptr self) -> float"""
        return _raw_util.raw_divide_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(raw_divide_ff_sptr self) -> float"""
        return _raw_util.raw_divide_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(raw_divide_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _raw_util.raw_divide_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(raw_divide_ff_sptr self)"""
        return _raw_util.raw_divide_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(raw_divide_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _raw_util.raw_divide_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(raw_divide_ff_sptr self) -> int"""
        return _raw_util.raw_divide_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(raw_divide_ff_sptr self) -> int"""
        return _raw_util.raw_divide_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(raw_divide_ff_sptr self, int priority) -> int"""
        return _raw_util.raw_divide_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(raw_divide_ff_sptr self) -> std::string"""
        return _raw_util.raw_divide_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(raw_divide_ff_sptr self) -> std::string"""
        return _raw_util.raw_divide_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(raw_divide_ff_sptr self) -> io_signature_sptr"""
        return _raw_util.raw_divide_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(raw_divide_ff_sptr self) -> io_signature_sptr"""
        return _raw_util.raw_divide_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(raw_divide_ff_sptr self) -> long"""
        return _raw_util.raw_divide_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(raw_divide_ff_sptr self) -> basic_block_sptr"""
        return _raw_util.raw_divide_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(raw_divide_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _raw_util.raw_divide_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(raw_divide_ff_sptr self) -> std::string"""
        return _raw_util.raw_divide_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(raw_divide_ff_sptr self, std::string name)"""
        return _raw_util.raw_divide_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(raw_divide_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _raw_util.raw_divide_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(raw_divide_ff_sptr self) -> swig_int_ptr"""
        return _raw_util.raw_divide_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(raw_divide_ff_sptr self) -> swig_int_ptr"""
        return _raw_util.raw_divide_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(raw_divide_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _raw_util.raw_divide_ff_sptr_message_subscribers(self, which_port)

raw_divide_ff_sptr_swigregister = _raw_util.raw_divide_ff_sptr_swigregister
raw_divide_ff_sptr_swigregister(raw_divide_ff_sptr)


raw_divide_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def divide_ff():
    """divide_ff() -> raw_divide_ff_sptr"""
    return _raw_util.divide_ff()


